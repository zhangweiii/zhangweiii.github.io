<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>%2F2020%2F03%2F20%2Fvim_ag%2F</url>
    <content type="text"><![CDATA[title: vim 搜索插件 ag 安装使用date: 2020-03-18categories: 工具tags: ag vimcomments: trueimg: vim 搜索插件 ag 安装使用系统中安装the_silver_searcher1brew install the_silver_searcher the silver searcher 项目地址 其它平台可以去项目地址中查看如何安装 安装ag.vim~/.vimrc中添加如下内容 1Plug 'rking/ag.vim' 重新打开vim后输入:PlugInstall 使用 Ag: 查找内容]]></content>
  </entry>
  <entry>
    <title><![CDATA[vim 插件 fzf 安装使用]]></title>
    <url>%2F2020%2F03%2F18%2Ffzf%2F</url>
    <content type="text"><![CDATA[vim 插件 fzf 安装使用fzf安装在vim-plug插件管理器中添加如下内容 12Plug 'junegunn/fzf', &#123; 'dir': '~/.fzf', 'do': './install --all' &#125;,Plug 'junegunn/fzf.vim', 重新打开vim后输入:PlugInstall来安装fzf fzf 命令： 命令 列出 :Files [path] 列出path路径下的所有文件 (功能等价于 :FZF 命令) :Buffers 文件缓冲区切换 :Colors 选择Vim配色方案 :Tags [QUERY] 当前项目中的Tag (等价于：ctags -R) :BTags [QUERY] 当前活动缓冲区的标记 :Marks 所有Vim标记 :Windows 窗口 :Lines [QUERY] 在所有加载的文件缓冲区里包含目标词的所有行 BLines [QUERY] 在当前文件缓冲区里包含目标词的行 Locate PATTERN locate command output History v:oldfiles and open buffers History: 命令行命令历史 History/ 搜索历史 Commands Vim命令列表 Maps 普通模式下的按键映射 Snippets Snippets ([UltiSnips][us]) Commits Git commits (requires [fugitive.vim][f]) BCommits Git commits for the current buffer GFiles [OPTS] Git files (git ls-files) GFiles? Git files (git status) Ag [PATTERN] [ag][ag] search result (ALT-A to select all, ALT-D to deselect all) Rg [PATTERN] [rg][rg] search result (ALT-A to select all, ALT-D to deselect all) Filetypes File types]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>fzf vim</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[配置 vim 作为 golang IDE]]></title>
    <url>%2F2020%2F03%2F17%2F%E9%85%8D%E7%BD%AEVIM%2F</url>
    <content type="text"><![CDATA[配置 vim 作为 golang IDE安装vim的插件管理器官方主页:vim-plug 为vim安装执行： 12curl -fLo ~/.vim/autoload/plug.vim --create-dirs \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim 为nvim安装执行： 12curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim nvim 共用 vim 的插件目录和配置文件执行以下命令： 123mkdir -p ~/.local/share/nvim/site // 创建nvim插件目录ln -s ~/.vim ~/.local/share/nvim/site // 链接vim插件目录到nvim插件目录ln -s .vimrc .config/nvim/init.vim // 链接vim配置到nvim配置 修改.vimrc文件路径:~/.vimrc 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230" Specify a directory for pluginscall plug#begin('~/.vim/plugged')Plug 'neoclide/coc.nvim', &#123;'branch': 'release'&#125;Plug 'scrooloose/nerdtree'"Plug 'tsony-tsonev/nerdtree-git-plugin'Plug 'Xuyuanp/nerdtree-git-plugin'Plug 'tiagofumo/vim-nerdtree-syntax-highlight'Plug 'ryanoasis/vim-devicons'Plug 'airblade/vim-gitgutter'Plug 'ctrlpvim/ctrlp.vim' " fuzzy find filesPlug 'scrooloose/nerdcommenter'"Plug 'prettier/vim-prettier', &#123; 'do': 'yarn install' &#125;Plug 'christoomey/vim-tmux-navigator'Plug 'morhetz/gruvbox'Plug 'vim-airline/vim-airline'Plug 'vim-airline/vim-airline-themes'Plug 'mhinz/vim-startify'Plug 'fatih/vim-go', &#123; 'do': ':GoUpdateBinaries' &#125;Plug 'HerringtonDarkholme/yats.vim' " TS Syntax" Initialize plugin systemcall plug#end()inoremap jk &lt;ESC&gt;nmap &lt;C-n&gt; :NERDTreeToggle&lt;CR&gt;vmap ++ &lt;plug&gt;NERDCommenterTogglenmap ++ &lt;plug&gt;NERDCommenterToggle" open NERDTree automatically"autocmd StdinReadPre * let s:std_in=1"autocmd VimEnter * NERDTreelet g:NERDTreeGitStatusWithFlags = 1"let g:WebDevIconsUnicodeDecorateFolderNodes = 1"let g:NERDTreeGitStatusNodeColorization = 1"let g:NERDTreeColorMapCustom = &#123; "\ "Staged" : "#0ee375", "\ "Modified" : "#d9bf91", "\ "Renamed" : "#51C9FC", "\ "Untracked" : "#FCE77C", "\ "Unmerged" : "#FC51E6", "\ "Dirty" : "#FFBD61", "\ "Clean" : "#87939A", "\ "Ignored" : "#808080" "\ &#125; let g:NERDTreeIgnore = ['^node_modules$']" vim-prettier"let g:prettier#quickfix_enabled = 0"let g:prettier#quickfix_auto_focus = 0" prettier command for coccommand! -nargs=0 Prettier :CocCommand prettier.formatFile" run prettier on save"let g:prettier#autoformat = 0"autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue,*.yaml,*.html PrettierAsync" ctrlplet g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']" j/k will move virtual lines (lines that wrap)noremap &lt;silent&gt; &lt;expr&gt; j (v:count == 0 ? 'gj' : 'j')noremap &lt;silent&gt; &lt;expr&gt; k (v:count == 0 ? 'gk' : 'k')set relativenumberset smarttabset cindentset tabstop=2set shiftwidth=2" always uses spaces instead of tab charactersset expandtabcolorscheme gruvbox" sync open file with NERDTree" " Check if NERDTree is open or activefunction! IsNERDTreeOpen() return exists("t:NERDTreeBufName") &amp;&amp; (bufwinnr(t:NERDTreeBufName) != -1)endfunction" Call NERDTreeFind iff NERDTree is active, current window contains a modifiable" file, and we're not in vimdifffunction! SyncTree() if &amp;modifiable &amp;&amp; IsNERDTreeOpen() &amp;&amp; strlen(expand('%')) &gt; 0 &amp;&amp; !&amp;diff NERDTreeFind wincmd p endifendfunction" Highlight currently open buffer in NERDTreeautocmd BufEnter * call SyncTree()" coc configlet g:coc_global_extensions = [ \ 'coc-snippets', \ 'coc-pairs', \ 'coc-tsserver', \ 'coc-eslint', \ 'coc-prettier', \ 'coc-json', \ ]" from readme" if hidden is not set, TextEdit might fail.set hidden " Some servers have issues with backup files, see #649 set nobackup set nowritebackup " Better display for messages set cmdheight=2 " You will have bad experience for diagnostic messages when it's default 4000.set updatetime=300" don't give |ins-completion-menu| messages.set shortmess+=c" always show signcolumnsset signcolumn=yes" Use tab for trigger completion with characters ahead and navigate." Use command ':verbose imap &lt;tab&gt;' to make sure tab is not mapped by other plugin.inoremap &lt;silent&gt;&lt;expr&gt; &lt;TAB&gt; \ pumvisible() ? "\&lt;C-n&gt;" : \ &lt;SID&gt;check_back_space() ? "\&lt;TAB&gt;" : \ coc#refresh()inoremap &lt;expr&gt;&lt;S-TAB&gt; pumvisible() ? "\&lt;C-p&gt;" : "\&lt;C-h&gt;"function! s:check_back_space() abort let col = col('.') - 1 return !col || getline('.')[col - 1] =~# '\s'endfunction" Use &lt;c-space&gt; to trigger completion.inoremap &lt;silent&gt;&lt;expr&gt; &lt;c-space&gt; coc#refresh()" Use &lt;cr&gt; to confirm completion, `&lt;C-g&gt;u` means break undo chain at current position." Coc only does snippet and additional edit on confirm.inoremap &lt;expr&gt; &lt;cr&gt; pumvisible() ? "\&lt;C-y&gt;" : "\&lt;C-g&gt;u\&lt;CR&gt;"" Or use `complete_info` if your vim support it, like:" inoremap &lt;expr&gt; &lt;cr&gt; complete_info()["selected"] != "-1" ? "\&lt;C-y&gt;" : "\&lt;C-g&gt;u\&lt;CR&gt;"" Use `[g` and `]g` to navigate diagnosticsnmap &lt;silent&gt; [g &lt;Plug&gt;(coc-diagnostic-prev)nmap &lt;silent&gt; ]g &lt;Plug&gt;(coc-diagnostic-next)" Remap keys for gotosnmap &lt;silent&gt; gd &lt;Plug&gt;(coc-definition)nmap &lt;silent&gt; gy &lt;Plug&gt;(coc-type-definition)nmap &lt;silent&gt; gi &lt;Plug&gt;(coc-implementation)nmap &lt;silent&gt; gr &lt;Plug&gt;(coc-references)" Use K to show documentation in preview windownnoremap &lt;silent&gt; K :call &lt;SID&gt;show_documentation()&lt;CR&gt;function! s:show_documentation() if (index(['vim','help'], &amp;filetype) &gt;= 0) execute 'h '.expand('&lt;cword&gt;') else call CocAction('doHover') endifendfunction" Highlight symbol under cursor on CursorHoldautocmd CursorHold * silent call CocActionAsync('highlight')" Remap for rename current wordnmap &lt;F2&gt; &lt;Plug&gt;(coc-rename)" Remap for format selected regionxmap &lt;leader&gt;f &lt;Plug&gt;(coc-format-selected)nmap &lt;leader&gt;f &lt;Plug&gt;(coc-format-selected)augroup mygroup autocmd! " Setup formatexpr specified filetype(s). autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected') " Update signature help on jump placeholder autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')augroup end" Remap for do codeAction of selected region, ex: `&lt;leader&gt;aap` for current paragraphxmap &lt;leader&gt;a &lt;Plug&gt;(coc-codeaction-selected)nmap &lt;leader&gt;a &lt;Plug&gt;(coc-codeaction-selected)" Remap for do codeAction of current linenmap &lt;leader&gt;ac &lt;Plug&gt;(coc-codeaction)" Fix autofix problem of current linenmap &lt;leader&gt;qf &lt;Plug&gt;(coc-fix-current)" Create mappings for function text object, requires document symbols feature of languageserver.xmap if &lt;Plug&gt;(coc-funcobj-i)xmap af &lt;Plug&gt;(coc-funcobj-a)omap if &lt;Plug&gt;(coc-funcobj-i)omap af &lt;Plug&gt;(coc-funcobj-a)" Use &lt;C-d&gt; for select selections ranges, needs server support, like: coc-tsserver, coc-pythonnmap &lt;silent&gt; &lt;C-d&gt; &lt;Plug&gt;(coc-range-select)xmap &lt;silent&gt; &lt;C-d&gt; &lt;Plug&gt;(coc-range-select)" Use `:Format` to format current buffercommand! -nargs=0 Format :call CocAction('format')" Use `:Fold` to fold current buffercommand! -nargs=? Fold :call CocAction('fold', &lt;f-args&gt;)" use `:OR` for organize import of current buffercommand! -nargs=0 OR :call CocAction('runCommand', 'editor.action.organizeImport')" Add status line support, for integration with other plugin, checkout `:h coc-status`set statusline^=%&#123;coc#status()&#125;%&#123;get(b:,'coc_current_function','')&#125;" Using CocList" Show all diagnosticsnnoremap &lt;silent&gt; &lt;space&gt;a :&lt;C-u&gt;CocList diagnostics&lt;cr&gt;" Manage extensionsnnoremap &lt;silent&gt; &lt;space&gt;e :&lt;C-u&gt;CocList extensions&lt;cr&gt;" Show commandsnnoremap &lt;silent&gt; &lt;space&gt;c :&lt;C-u&gt;CocList commands&lt;cr&gt;" Find symbol of current documentnnoremap &lt;silent&gt; &lt;space&gt;o :&lt;C-u&gt;CocList outline&lt;cr&gt;" Search workspace symbolsnnoremap &lt;silent&gt; &lt;space&gt;s :&lt;C-u&gt;CocList -I symbols&lt;cr&gt;" Do default action for next item.nnoremap &lt;silent&gt; &lt;space&gt;j :&lt;C-u&gt;CocNext&lt;CR&gt;" Do default action for previous item.nnoremap &lt;silent&gt; &lt;space&gt;k :&lt;C-u&gt;CocPrev&lt;CR&gt;" Resume latest coc listnnoremap &lt;silent&gt; &lt;space&gt;p :&lt;C-u&gt;CocListResume&lt;CR&gt; 其中coc插件可能报错，可以尝试进入~/.vim/plugged/coc.nvim执行yarn install 安装其他插件今天nvim后输入:PlugInstall来安装插件，其中报错不用在意，因为插件没有安装但是加载了插件配置。]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>VIM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac 配置Golang开发环境]]></title>
    <url>%2F2020%2F01%2F15%2FMac-%E9%85%8D%E7%BD%AEGolang%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[安装 brew官网：https://brew.sh/ 直接安装命令： 1/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" 安装 iTerm2官网：https://www.iterm2.com/ 使用官网下载安装 使用brew命令安装 1brew cask install iterm2 安装 zsh 和 oh-my-zshzsh官网：http://www.zsh.org/ 使用brew安装： 1brew install zsh oh-my-zsh官网：https://ohmyz.sh/ 使用shell命令安装： curl 安装 1sh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)" wget 安装 1sh -c "$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)" 如果提示命令没有找到可以使用brew安装对应软件包 1brew install curl 或者 brew install wget 安装 oh-my-zsh 的插件安装 zsh-syntax-highlighting1git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting 修改 ~/.zshrc1plugins = (...plugins zsh-syntax-highlighting) 安装 zsh-autosuggestions1git clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions 修改 ~/.zshrc1plugins = (...plugins zsh-autosuggestions) 安装 powerlevel9k 主题官网：https://github.com/Powerlevel9k/powerlevel9k 使用brew安装： 12brew tap sambadevi/powerlevel9kbrew install powerlevel9k 安装完成后，需要修改oh-my-zsh的默认主题，修改~/.zshrc文件，指定主题为powerlevel9k 修改 ZSH_THEME”robbyrussell” 为 ZSH_THEME”powerlevel9k/powerlevel9k” 安装 dejavu sans mono for powerline 和 Hack Nerd Font 字体使用brew安装： 12brew tap homebrew/cask-fontsbrew cask install font-hack-nerd-font 安装完成后，需要在iTerm2 -&gt; 偏好设置 -&gt; Profiles -&gt; Text -&gt; 勾选Use a different font for non-ASCII text -&gt; 选择 Hack Nerd Font 选择这个字体主要是解决之后spacevim图标显示问号的问题 安装 golang下载地址：https://studygolang.com/dl安装方式：http://docscn.studygolang.com/doc/install 总结起来就是四步: wget https://dl.google.com/go/go1.14.linux-amd64.tar.gz sudo tar -C /usr/local -xzf go1.14.linux-amd64.tar.gz ~/.zshrc中添加export PATH=$PATH:/usr/local/go/bin source ~/.zshrc 其中go1.14.linux-amd64.tar.gz是下载的文件名，这里是linux版本1.14 使用 spacevim 配置 vim/nvimnvim官网：https://neovim.io/ 使用shell安装nvim： 1brew install neovim spacevim官网：https://spacevim.org 使用shell安装spacevim： 1curl -sLf https://spacevim.org/install.sh | bash 安装后，需要安装golang layer，修改 ~/.SpaceVim.d/init.toml，如果没有先打开nvim，命令行输入nvim即可，添加一下内容： 12[[layers]]name = "lang#go" 重新启动nvim，插件会自动安装下载 配置 powerlevel9k将一下内容添加到 ~/.zshrc： 1234POWERLEVEL9K_MODE="nerdfont-complete"POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(ssh dir vcs newline status)POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=()POWERLEVEL9K_PROMPT_ADD_NEWLINE=true 执行 source ~/.zshrc 使修改生效 配置 Nord 主题包括 vim oh-my-zsh iterm2 官网地址:https://www.nordtheme.com/ 安装vim go的必要的二进制文件进入nvim nvim 键入 :GoInstallBinaries 然后回车，nvim会自动下载编译二进制文件 如果安装失败，提示超时，可以自己复制包地址，在设置代理后，在命令行自行下载 设置Golang代理 123export GOPROXY="https://mirrors.aliyun.com/goproxy/"export GO111MODULE="on" 执行 source ~/.zshrc 使修改生效]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Gogs 配置说明]]></title>
    <url>%2F2019%2F05%2F01%2Fgogs-config%2F</url>
    <content type="text"><![CDATA[1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798991001011021031041051061071081091101111121131141151161171181191201211221231241251261271281291301311321331341351361371381391401411421431441451461471481491501511521531541551561571581591601611621631641651661671681691701711721731741751761771781791801811821831841851861871881891901911921931941951961971981992002012022032042052062072082092102112122132142152162172182192202212222232242252262272282292302312322332342352362372382392402412422432442452462472482492502512522532542552562572582592602612622632642652662672682692702712722732742752762772782792802812822832842852862872882892902912922932942952962972982993003013023033043053063073083093103113123133143153163173183193203213223233243253263273283293303313323333343353363373383393403413423433443453463473483493503513523533543553563573583593603613623633643653663673683693703713723733743753763773783793803813823833843853863873883893903913923933943953963973983994004014024034044054064074084094104114124134144154164174184194204214224234244254264274284294304314324334344354364374384394404414424434444454464474484494504514524534544554564574584594604614624634644654664674684694704714724734744754764774784794804814824834844854864874884894904914924934944954964974984995005015025035045055065075085095105115125135145155165175185195205215225235245255265275285295305315325335345355365375385395405415425435445455465475485495505515525535545555565575585595605615625635645655665675685695705715725735745755765775785795805815825835845855865875885895905915925935945955965975985996006016026036046056066076086096106116126136146156166176186196206216226236246256266276286296306316326336346356366376386396406416426436446456466476486496506516526536546556566576586596606616626636646656666676686696706716726736746756766776786796806816826836846856866876886896906916926936946956966976986997007017027037047057067077087097107117127137147157167177187197207217227237247257267277287297307317327337347357367377387397407417427437447457467477487497507517527537547557567577587597607617627637647657667677687697707717727737747757767777787797807817827837847857867877887897907917927937947957967977987998008018028038048058068078088098108118128138148158168178188198208218228238248258268278288298308318328338348358368378388398408418428438448458468478488498508518528538548558568578588598608618628638648658668678688698708718728738748758768778788798808818828838848858868878888898908918928938948958968978988999009019029039049059069079089099109119129139149159169179189199209219229239249259269279289299309319329339349359369379389399409419429439449459469479489499509519529539549559569579589599609619629639649659669679689699709719729739749759769779789799809819829839849859869879889899909919929939949959969979989991000100110021003100410051006100710081009101010111012101310141015101610171018101910201021102210231024102510261027102810291030103110321033103410351036103710381039104010411042104310441045104610471048104910501051105210531054105510561057105810591060106110621063106410651066106710681069107010711072107310741075107610771078107910801081108210831084108510861087108810891090109110921093109410951096109710981099110011011102110311041105110611071108110911101111111211131114111511161117111811191120112111221123112411251126112711281129113011311132113311341135113611371138113911401141114211431144114511461147114811491150115111521153115411551156115711581159116011611162116311641165116611671168116911701171117211731174117511761177117811791180118111821183118411851186118711881189119011911192119311941195119611971198119912001201120212031204120512061207120812091210121112121213121412151216121712181219122012211222122312241225122612271228122912301231123212331234123512361237123812391240124112421243124412451246124712481249125012511252125312541255125612571258125912601261126212631264126512661267126812691270127112721273127412751276127712781279128012811282128312841285128612871288128912901291129212931294129512961297129812991300130113021303130413051306130713081309131013111312131313141315131613171318app_desc=一款极易搭建的自助 Git 服务home=首页dashboard=控制面板explore=探索help=帮助sign_in=登录sign_out=退出sign_up=注册register=注册website=官方网站version=当前版本page=页面template=模板language=语言选项create_new=创建...user_profile_and_more=用户信息及更多signed_in_as=已登录用户username=用户名email=邮箱password=密码re_type=确认密码captcha=验证码repository=仓库organization=组织mirror=镜像new_repo=创建新的仓库new_migrate=迁移外部仓库new_mirror=创建新的镜像new_fork=创建新的派生仓库new_org=创建新的组织manage_org=管理我的组织admin_panel=管理面板account_settings=帐户设置settings=帐户设置your_profile=个人信息your_settings=用户设置activities=最近活动pull_requests=合并请求issues=工单管理cancel=取消[install]install=安装页面title=首次运行安装程序docker_helper=如果您正在使用 Docker 容器运行 Gogs，请务必先仔细阅读 &lt;a target=&quot;_blank&quot; href=&quot;%s&quot;&gt;官方文档&lt;/a&gt; 后再对本页面进行填写。requite_db_desc=Gogs 要求安装 MySQL、PostgreSQL、SQLite3、MSSQL 或 TiDB。db_title=数据库设置db_type=数据库类型host=数据库主机user=数据库用户password=数据库用户密码db_name=数据库名称db_helper=如果您使用 MySQL，请使用 INNODB 引擎以及 utf8_general_ci 字符集。ssl_mode=SSL 模式path=数据库文件路径sqlite_helper=SQLite3 数据库文件路径。&lt;br&gt;作为服务启动时，请使用绝对路径。err_empty_db_path=SQLite 数据库文件路径不能为空。no_admin_and_disable_registration=您不能够在未创建管理员用户的情况下禁止注册。err_empty_admin_password=管理员密码不能为空。general_title=应用基本设置app_name=应用名称app_name_helper=快用狂拽酷炫的组织名称闪瞎我们！repo_path=仓库根目录repo_path_helper=所有 Git 远程仓库都将被存放于该目录。run_user=运行系统用户run_user_helper=该用户必须具有对仓库根目录和运行 Gogs 的操作权限。domain=域名domain_helper=该设置影响 SSH 克隆地址。ssh_port=SSH 端口号ssh_port_helper=SSH 服务器的监听端口号，留空表示禁用 SSH 功能。use_builtin_ssh_server=使用内置 SSH 服务器use_builtin_ssh_server_popup=启动内置 SSH 服务器专门用于 Git 操作可以和系统 SSH 守护程序进行隔离。http_port=HTTP 端口号http_port_helper=应用监听的端口号app_url=应用 URLapp_url_helper=该设置影响 HTTP/HTTPS 克隆地址和一些邮箱中的链接。log_root_path=日志路径log_root_path_helper=存放日志文件的目录enable_console_mode=启用控制台模式enable_console_mode_popup=除了使用文件模式外，还将日志输出到控制台optional_title=可选设置email_title=邮件服务设置smtp_host=SMTP 主机smtp_from=邮件来自smtp_from_helper=邮件来自地址，遵循 RFC 5322 标准。可以是一个单纯的邮箱地址或使用 &quot;Name&quot; &lt;email@example.com&gt; 的格式。mailer_user=发送邮箱mailer_password=发送邮箱密码register_confirm=启用注册邮箱确认mail_notify=启用邮件通知提醒server_service_title=服务器和其它服务设置offline_mode=启用离线模式offline_mode_popup=在部署模式下也禁用从 CDN 获取文件，所以的资源都将从本地服务器获取。disable_gravatar=禁用 Gravatar 服务disable_gravatar_popup=禁用 Gravatar 和自定义源，仅使用由用户上传的或默认的头像。federated_avatar_lookup=启用 Federated Avatars 查找federated_avatar_lookup_popup=启用 Federated Avatars 查找以使用开源的 Libravatar 服务。disable_registration=禁止用户自主注册disable_registration_popup=禁止用户自行注册功能，只有管理员可以添加帐号。enable_captcha=启用验证码服务enable_captcha_popup=要求在用户注册时输入预验证码require_sign_in_view=启用登录访问限制require_sign_in_view_popup=只有已登录的用户才能够访问页面，否则将只能看到登录或注册页面。admin_setting_desc=创建管理员帐号并不是必须的，因为 ID=1 的用户将自动获得管理员权限。admin_title=管理员帐号设置admin_name=管理员用户名admin_password=管理员密码confirm_password=确认密码admin_email=管理员邮箱install_gogs=立即安装test_git_failed=无法识别 &apos;git&apos; 命令：%vsqlite3_not_available=您所使用的发行版不支持 SQLite3，请从 %s 下载官方构建版，而不是 gobuild 版本。invalid_db_setting=数据库设置不正确：%vinvalid_repo_path=仓库根目录设置不正确：%vrun_user_not_match=运行系统用户非当前用户：%s -&gt; %ssmtp_host_missing_port=SMTP 地址缺少端口号。invalid_smtp_from=SMTP From 字段不合法：%vsave_config_failed=应用配置保存失败：%vinvalid_admin_setting=管理员帐户设置不正确：%vinstall_success=您好！我们很高兴您选择使用 Gogs，祝您使用愉快，代码从此无 BUG！invalid_log_root_path=无效的日志路径：%v[home]uname_holder=用户名或邮箱password_holder=密码switch_dashboard_context=切换控制面板用户my_repos=我的仓库show_more_repos=显示更多仓库...collaborative_repos=参与协作的仓库my_orgs=我的组织my_mirrors=我的镜像view_home=访问 %sissues.in_your_repos=属于该用户仓库的[explore]repos=仓库users=用户organizations=组织search=搜索[auth]create_new_account=创建帐户register_hepler_msg=已经注册？立即登录！social_register_hepler_msg=已经注册？立即绑定！disable_register_prompt=对不起，注册功能已被关闭。请联系网站管理员。disable_register_mail=对不起，注册邮箱确认功能已被关闭。remember_me=记住登录forgot_password=忘记密码forget_password=忘记密码？sign_up_now=还没帐户？马上注册。confirmation_mail_sent_prompt=一封新的确认邮件已经被发送至 &lt;b&gt;%s&lt;/b&gt;，请检查您的收件箱并在 %d 小时内完成确认注册操作。active_your_account=激活您的帐户prohibit_login=禁止登录prohibit_login_desc=您的帐户被禁止登录，请联系网站管理员。resent_limit_prompt=对不起，您请求发送激活邮件过于频繁，请等待 3 分钟后再试！has_unconfirmed_mail=%s 您好，系统检测到您有一封发送至 &lt;b&gt;%s&lt;/b&gt; 但未被确认的邮件。如果您未收到激活邮件，或需要重新发送，请单击下方的按钮。resend_mail=单击此处重新发送确认邮件send_reset_mail=单击此处（重新）发送您的密码重置邮件reset_password=重置密码invalid_code=对不起，您的确认代码已过期或已失效。reset_password_helper=单击此处重置密码password_too_short=密码长度不能少于 6 位！non_local_account=非本地类型的帐户无法通过 Gogs 修改密码。login_two_factor=两步验证登录login_two_factor_passcode=动态令牌login_two_factor_enter_recovery_code=输入两步验证恢复密钥login_two_factor_recovery=两步验证恢复登录login_two_factor_recovery_code=恢复密钥login_two_factor_enter_passcode=输入两步验证动态令牌login_two_factor_invalid_recovery_code=恢复密钥已经被使用或是无效的[mail]activate_account=请激活您的帐户activate_email=请验证您的邮箱地址reset_password=重置您的密码register_success=注册成功，欢迎使用register_notify=欢迎使用[modal]yes=确认操作no=取消操作modify=确认修改[form]UserName=用户名RepoName=仓库名称Email=邮箱地址Password=密码Retype=确认密码SSHTitle=SSH 密钥名称HttpsUrl=HTTPS URL 地址PayloadUrl=推送地址TeamName=团队名称AuthName=认证名称AdminEmail=管理员邮箱NewBranchName=新的分支名称CommitSummary=提交小结CommitMessage=提交消息CommitChoice=提交选择TreeName=文件路径Content=内容require_error=不能为空。alpha_dash_error=必须为英文字母、阿拉伯数字或横线（-_）。alpha_dash_dot_error=必须为英文字母、阿拉伯数字、横线（-_）或点。alpha_dash_dot_slash_error=必须为英文字母、阿拉伯数字、横线（-_）、点或斜线。size_error=长度必须为 %s。min_size_error=长度最小为 %s 个字符。max_size_error=长度最大为 %s 个字符。email_error=不是一个有效的邮箱地址。url_error=不是一个有效的 URL。include_error=必须包含子字符串 &apos;%s&apos;。unknown_error=未知错误：captcha_incorrect=验证码未匹配。password_not_match=密码与确认密码未匹配。username_been_taken=用户名已经被占用。repo_name_been_taken=仓库名称已经被占用。org_name_been_taken=组织名称已经被占用。team_name_been_taken=团队名称已经被占用。email_been_used=邮箱地址已经被使用。username_password_incorrect=用户名或密码不正确。enterred_invalid_repo_name=请检查您输入的仓库名称是正确。enterred_invalid_owner_name=请检查您输入的新所有者用户名是否正确。enterred_invalid_password=请检查您输入的密码是否正确。user_not_exist=被操作的用户不存在！last_org_owner=被移除用户为最后一位管理员。请添加一位新的管理员再进行移除成员操作！invalid_ssh_key=很抱歉，我们无法验证您输入的 SSH 密钥：%sunable_verify_ssh_key=Gogs 无法验证您输入的 SSH 密钥，但我们假设那是有效的密钥，请您自行确保其有效性！auth_failed=授权验证失败：%vstill_own_repo=您的帐户仍然是某些仓库的拥有者，您必须先转移或删除它们才能执行删除帐户操作！still_has_org=您的帐户仍旧是某些组织的成员，您必须先离开或删除组织。org_still_own_repo=该组织仍然是某些仓库的拥有者，您必须先转移或删除它们才能执行删除组织操作！target_branch_not_exist=目标分支不存在。[user]change_avatar=修改头像join_on=加入于repositories=仓库列表activity=公开活动followers=关注者starred=已点赞following=关注中follow=关注unfollow=取消关注form.name_reserved=用户名 &apos;%s&apos; 是被保留的。form.name_pattern_not_allowed=用户名不允许 &apos;%s&apos; 的格式。[settings]profile=个人信息password=修改密码avatar=头像设置ssh_keys=SSH 密钥security=帐户安全repos=仓库列表orgs=组织列表applications=授权应用delete=删除帐户public_profile=公开信息profile_desc=您的邮箱地址将会被公开，并被用于接收帐户的所有提醒和通知。password_username_disabled=非本地类型的用户被禁止修改用户名。full_name=自定义名称website=个人网站location=所在地区update_profile=更新信息update_profile_success=您的个人信息更新成功！change_username=用户名将被修改change_username_prompt=该操作将会影响到所有与您帐户有关的链接continue=继续操作cancel=取消操作lookup_avatar_by_mail=通过邮箱地址获取头像federated_avatar_lookup=Federated Avatar 查找enable_custom_avatar=启动自定义头像choose_new_avatar=选择新的头像update_avatar=更新头像设置delete_current_avatar=删除当前头像uploaded_avatar_not_a_image=上传的文件不是一张图片！update_avatar_success=您的头像设置更新成功！change_password=修改密码old_password=当前密码new_password=新的密码retype_new_password=重新输入新的密码password_incorrect=当前密码不正确！change_password_success=密码修改成功！您现在可以使用新的密码登录。password_change_disabled=非本地类型的用户被禁止修改密码。emails=邮箱地址manage_emails=管理邮箱地址email_desc=您的主要邮箱地址将被用于通知提醒和其它操作。primary=主要primary_email=设为主要delete_email=删除email_deletion=邮箱删除操作email_deletion_desc=删除该邮箱地址将会移除所有相关的信息。是否继续?email_deletion_success=邮箱删除成功！add_new_email=添加新的邮箱地址add_email=添加邮箱add_email_confirmation_sent=一封待确认的电子邮件已发送到 &apos;%s&apos;，请在 %d 小时内检查您的收件箱，并完成确认过程。add_email_success=新的邮箱地址添加成功！manage_ssh_keys=管理 SSH 密钥add_key=增加密钥ssh_desc=以下是与您帐户所关联的 SSH 密钥，如果您发现有陌生的密钥，请立即删除它！ssh_helper=&lt;strong&gt;需要帮助？&lt;/strong&gt; 请查看有关 &lt;a href=&quot;%s&quot;&gt;如何生成 SSH 密钥&lt;/a&gt; 或 &lt;a href=&quot;%s&quot;&gt;常见 SSH 问题&lt;/a&gt; 寻找答案。add_new_key=增加 SSH 密钥ssh_key_been_used=公开密钥已经被使用！ssh_key_name_used=使用相同名称的公开密钥已经存在！key_name=密钥名称key_content=密钥内容add_key_success=新的 SSH 密钥 &apos;%s&apos; 添加成功！delete_key=删除密钥ssh_key_deletion=删除 SSH 公钥操作ssh_key_deletion_desc=删除该 SSH 公钥将删除所有与您帐户相关的访问权限。是否继续?ssh_key_deletion_success=SSH 公钥删除成功！add_on=增加于last_used=上次使用在no_activity=没有最近活动key_state_desc=该密钥在 7 天内被使用过token_state_desc=该令牌在 7 天内被使用过two_factor=两步验证two_factor_status=当前状态：two_factor_on=开启two_factor_off=关闭two_factor_enable=启用两步验证two_factor_disable=关闭两步验证two_factor_view_recovery_codes=查看并备份 &lt;a href=&quot;%s%s&quot;&gt;恢复密钥&lt;/a&gt; 到一个安全的地方，当您无法使用认证应用时可以使用恢复密钥作为临时令牌。two_factor_http=对于 HTTP/HTTPS 操作，您不再能够使用用户名和密码作为凭据。请创建和使用 &lt;a href=&quot;%[1]s%[2]s&quot;&gt; 个人操作令牌&lt;/a&gt; 作为您的凭据，如 &lt;code&gt;%[3]s&lt;/code&gt;。two_factor_enable_title=启用两步验证two_factor_scan_qr=请使用您的认证应用扫描以下二维码︰two_factor_or_enter_secret=或者直接输入密钥：two_factor_then_enter_passcode=然后输入动态令牌：two_factor_verify=验证令牌two_factor_invalid_passcode=您输入的动态令牌无效，请重试！two_factor_enable_error=启用两步验证失败：%vtwo_factor_enable_success=两步验证登录启用成功！two_factor_recovery_codes_title=两步验证恢复密钥two_factor_recovery_codes_desc=当您无法使用认证应用时，可以使用恢复密钥作为临时令牌。每个恢复密钥只能被使用一次，&lt;b&gt;请务必将它们保存在一个安全的地方&lt;/b&gt;。two_factor_regenerate_recovery_codes=重新生成恢复密钥two_factor_regenerate_recovery_codes_error=重新生成恢复密钥失败：%vtwo_factor_regenerate_recovery_codes_success=新的恢复密钥生成成功！two_factor_disable_title=关闭两步验证two_factor_disable_desc=关闭两步验证后，您的帐户安全等级将变低。是否继续？two_factor_disable_success=两步验证登录关闭成功！manage_access_token=管理个人操作令牌generate_new_token=生成新的令牌tokens_desc=您可以使用这些已生成的令牌来操作 Gogs API。new_token_desc=目前为止，任何令牌都对您的帐户拥有完整的操作权限。token_name=令牌名称generate_token=生成令牌generate_token_succees=新的操作令牌生成成功！您必须立即复制到一个安全的地方，因为该令牌只会显示一次！delete_token=删除令牌access_token_deletion=删除个人操作令牌操作access_token_deletion_desc=删除该个人操作令牌将删除所有相关的应用程序的访问权限。是否继续?delete_token_success=个人操作令牌删除成功！请更新与该令牌有关的所有应用。orgs.none=您现在还不是任何组织的成员。orgs.leave_title=离开组织orgs.leave_desc=离开组织后，组织相关的所有仓库和团队权限将被收回。是否继续？repos.leave=离开仓库repos.leave_title=退出仓库协作repos.leave_desc=离开仓库后，相关权限将被收回。是否继续？repos.leave_success=您已经成功退出 &apos;%s&apos; 的仓库协作！delete_account=删除当前帐户delete_prompt=删除操作会永久清除您的帐户信息，并且 &lt;strong&gt;不可恢复&lt;/strong&gt;！confirm_delete_account=确认删除帐户delete_account_title=帐户删除操作delete_account_desc=该帐户将被永久性删除，您确定要继续操作吗？[repo]owner=拥有者repo_name=仓库名称repo_name_helper=伟大的仓库名称一般都较短、令人深刻并且 &lt;strong&gt;独一无二&lt;/strong&gt; 的。visibility=可见性visiblity_helper=该仓库为 &lt;span class=&quot;ui red text&quot;&gt;私有的&lt;/span&gt;visiblity_helper_forced=网站管理员已强制要求所有新建仓库必须为 &lt;span class=&quot;ui red text&quot;&gt;私有的&lt;/span&gt;visiblity_fork_helper=（修改该值将会影响到所有派生仓库）clone_helper=不知道如何操作？访问 &lt;a target=&quot;_blank&quot; href=&quot;%s&quot;&gt;此处&lt;/a&gt; 查看帮助！fork_repo=派生仓库fork_from=派生自fork_visiblity_helper=派生仓库无法修改可见性repo_desc=仓库描述repo_lang=仓库语言repo_gitignore_helper=选择 .gitignore 模板license=授权许可license_helper=请选择授权许可文件readme=自述文档readme_helper=请选择自述文档模板auto_init=使用选定的文件和模板初始化仓库create_repo=创建仓库default_branch=默认分支mirror_prune=修剪mirror_prune_desc=当远程追踪的引用被删除时本地也同步删除mirror_interval=镜像同步周期（小时）mirror_address=镜像地址mirror_address_desc=请在镜像地址中写入必要的用户凭据信息。mirror_last_synced=上次同步时间：watchers=关注者stargazers=称赞者forks=派生仓库form.reach_limit_of_creation=该用户已经达到允许创建 %d 个仓库的最大上限。form.name_reserved=仓库名称 &apos;%s&apos; 是被保留的。form.name_pattern_not_allowed=仓库名称不允许 &apos;%s&apos; 的格式。need_auth=需要授权验证migrate_type=迁移类型migrate_type_helper=该仓库将是一个 &lt;span class=&quot;text blue&quot;&gt;镜像&lt;/span&gt;migrate_repo=迁移仓库migrate.clone_address=克隆地址migrate.clone_address_desc=该地址可以是 HTTP/HTTPS/GIT 类型的 URL。migrate.clone_address_desc_import_local=您被允许使用服务器本地路径作为仓库的远程地址进行迁移。migrate.permission_denied=您没有获得导入本地仓库的权限。migrate.invalid_local_path=无效的本地路径，不存在或不是一个目录！migrate.failed=迁移失败：%vmirror_from=镜像自地址forked_from=派生自copy_link=复制链接copy_link_success=复制成功！copy_link_error=请按下 ⌘-C 或 Ctrl-C 复制copied=复制成功unwatch=取消关注watch=关注unstar=取消点赞star=点赞fork=派生no_desc=暂无描述quick_guide=快速帮助clone_this_repo=克隆当前仓库create_new_repo_command=从命令行创建一个新的仓库push_exist_repo=从命令行推送已经创建的仓库bare_message=这个家伙很懒，什么都没有推送。files=文件branch=分支tree=目录树filter_branch_and_tag=过滤分支或标签branches=分支列表tags=标签列表issues=工单管理pulls=合并请求labels=标签管理milestones=里程碑commits=提交历史git_branches=代码分支releases=版本发布file_raw=原始文件file_history=文件历史file_view_raw=查看原始文件file_permalink=永久链接file_too_large=文件过大导致无法显示video_not_supported_in_browser=您的浏览器不支持使用 HTML5 播放视频。branches.overview=概况branches.active_branches=活跃分支branches.stale_branches=陈旧分支branches.all=所有分支branches.updated_by=由 %[2]s 更新于 %[1]sbranches.change_default_branch=更改默认分支editor.new_file=新的文件editor.upload_file=上传文件editor.edit_file=编辑文件editor.preview_changes=预览变更editor.cannot_edit_non_text_files=无法编辑非文本文件editor.edit_this_file=编辑此文件editor.must_be_on_a_branch=您必须在某个分支上才能对此文件进行修改操作editor.fork_before_edit=您必须派生此仓库才能对此文件进行修改操作editor.delete_this_file=删除此文件editor.must_have_write_access=您必须具有可写权限才能对此文件进行修改操作editor.file_delete_success=文件 &apos;%s&apos; 删除成功！editor.name_your_file=命名文件...editor.filename_help=输入名称后按下 / 键即可添加目录，或将光标移至输入框最左侧按下退格键移除目录。editor.or=或editor.cancel_lower=取消editor.commit_changes=提交变更editor.add_tmpl=添加 &apos;%s/&lt;文件名&gt;&apos;editor.add=添加 &apos;%s&apos;editor.update=更新 &apos;%s&apos;editor.delete=删除 &apos;%s&apos;editor.commit_message_desc=添加一个可选的扩展描述...editor.commit_directly_to_this_branch=直接提交至 &lt;strong class=&quot;branch-name&quot;&gt;%s&lt;/strong&gt; 分支。editor.create_new_branch=为此提交创建一个 &lt;strong&gt;新的分支&lt;/strong&gt; 并发起合并请求。editor.new_branch_name_desc=新的分支名称...editor.cancel=取消editor.filename_cannot_be_empty=文件名不能为空。editor.branch_already_exists=此仓库已存在名为 &apos;%s&apos; 的分支。editor.directory_is_a_file=路径 &apos;%s&apos; 的父路径中包含此仓库已存在的文件名。editor.file_is_a_symlink=文件 &apos;%s&apos; 为一个符号链接，无法通过 Web 编辑器编辑内容。editor.filename_is_a_directory=文件名 &apos;%s&apos; 是此仓库中已存在的目录名。editor.file_editing_no_longer_exists=您编辑的文件 &apos;%s&apos; 已经不存在于此仓库中。editor.file_changed_while_editing=文件内容在您进行编辑时已经发生变动。&lt;a target=&quot;_blank&quot; href=&quot;%s&quot;&gt;单击此处&lt;/a&gt; 查看变动的具体内容，或者 &lt;strong&gt;再次提交&lt;/strong&gt; 覆盖已发生的变动。editor.file_already_exists=此仓库已经存在名为 &apos;%s&apos; 的文件。editor.no_changes_to_show=没有可以显示的变更。editor.fail_to_update_file=更新/创建文件 &apos;%s&apos; 时发生错误：%veditor.add_subdir=添加子目录...editor.unable_to_upload_files=上传文件至 &apos;%s&apos; 时发生错误：%veditor.upload_files_to_dir=上传文件至 &apos;%s&apos;commits.commit_history=提交历史commits.commits=次代码提交commits.search=搜索提交历史commits.find=查找commits.author=作者commits.message=备注commits.date=提交日期commits.older=更旧的提交commits.newer=更新的提交issues.new=创建工单issues.new.labels=标签issues.new.no_label=未选择标签issues.new.clear_labels=清除选中标签issues.new.milestone=里程碑issues.new.no_milestone=未选择里程碑issues.new.clear_milestone=取消选中里程碑issues.new.open_milestone=开启中的里程碑issues.new.closed_milestone=已关闭的里程碑issues.new.assignee=指派成员issues.new.clear_assignee=取消指派成员issues.new.no_assignee=未指派成员issues.create=创建工单issues.new_label=创建标签issues.new_label_placeholder=标签名称...issues.create_label=创建标签issues.label_templates.title=加载预定义的标签模板issues.label_templates.info=此仓库还未创建任何标签，您可以通过上方的 &quot;创建标签&quot; 创建一个新的标签或加载一组预定义的标签。issues.label_templates.helper=选择标签模板issues.label_templates.use=加载标签模板issues.label_templates.fail_to_load_file=加载标签模板文件 &apos;%s&apos; 时发生错误：%vissues.open_tab=%d 个开启中issues.close_tab=%d 个已关闭issues.filter_label=标签筛选issues.filter_label_no_select=无筛选标签issues.filter_milestone=里程碑筛选issues.filter_milestone_no_select=无筛选里程碑issues.filter_assignee=指派人筛选issues.filter_assginee_no_select=无筛选指派人issues.filter_type=类型筛选issues.filter_type.all_issues=所有工单issues.filter_type.assigned_to_you=指派给您的issues.filter_type.created_by_you=由您创建的issues.filter_type.mentioning_you=提及您的issues.filter_sort=排序issues.filter_sort.latest=最新创建issues.filter_sort.oldest=最早创建issues.filter_sort.recentupdate=最近更新issues.filter_sort.leastupdate=最少更新issues.filter_sort.mostcomment=最多评论issues.filter_sort.leastcomment=最少评论issues.opened_by=由 &lt;a href=&quot;%[2]s&quot;&gt;%[3]s&lt;/a&gt; 与 %[1]s创建issues.opened_by_fake=由 %[2]s 于 %[1]s创建issues.previous=上一页issues.next=下一页issues.open_title=开启中issues.closed_title=已关闭issues.num_comments=%d 条评论issues.commented_at=`评论于 &lt;a href=&quot;#%s&quot;&gt;%s&lt;/a&gt;`issues.delete_comment_confirm=您确定要删除该条评论吗？issues.no_content=这个人很懒，什么都没留下。issues.close_issue=关闭issues.close_comment_issue=评论并关闭issues.reopen_issue=重新开启issues.reopen_comment_issue=评论并重新开启issues.create_comment=评论issues.closed_at=`于 &lt;a id=&quot;%[1]s&quot; href=&quot;#%[1]s&quot;&gt;%[2]s&lt;/a&gt; 关闭`issues.reopened_at=`于 &lt;a id=&quot;%[1]s&quot; href=&quot;#%[1]s&quot;&gt;%[2]s&lt;/a&gt; 重新开启`issues.commit_ref_at=`在代码提交 &lt;a id=&quot;%[1]s&quot; href=&quot;#%[1]s&quot;&gt;%[2]s&lt;/a&gt; 中引用了该工单`issues.poster=发布者issues.collaborator=协作者issues.owner=所有者issues.sign_in_require_desc=&lt;a href=&quot;%s&quot;&gt;登陆&lt;/a&gt; 并参与到对话中。issues.edit=编辑issues.cancel=取消issues.save=保存issues.label_title=标签名称issues.label_color=标签颜色issues.label_count=%d 个标签issues.label_open_issues=%d 个开启的工单issues.label_edit=编辑issues.label_delete=删除issues.label_modify=修改标签issues.label_deletion=删除标签操作issues.label_deletion_desc=删除该标签将会移除所有工单中相关的信息。是否继续？issues.label_deletion_success=标签删除成功！issues.num_participants=%d 名参与者issues.attachment.open_tab=`在新的标签页中查看 &apos;%s&apos;`issues.attachment.download=`点击下载 &apos;%s&apos;`pulls.new=创建合并请求pulls.compare_changes=对比文件变化pulls.compare_changes_desc=对比两个分支间的文件变化并发起一个合并请求。pulls.compare_base=基准分支pulls.compare_compare=对比分支pulls.filter_branch=过滤分支pulls.no_results=未找到结果pulls.nothing_to_compare=基准和对比分支代码已经同步，无需进行对比。pulls.has_pull_request=`已经存在目标分支的合并请求：&lt;a href=&quot;%[1]s/pulls/%[3]d&quot;&gt;%[2]s#%[3]d&lt;/a&gt;`pulls.create=创建合并请求pulls.title_desc=请求将 %[1]d 次代码提交从 &lt;code&gt;%[2]s&lt;/code&gt; 合并至 &lt;code&gt;%[3]s&lt;/code&gt;pulls.merged_title_desc=于 %[4]s 将 %[1]d 次代码提交从 &lt;code&gt;%[2]s&lt;/code&gt;合并至 &lt;code&gt;%[3]s&lt;/code&gt; pulls.tab_conversation=对话内容pulls.tab_commits=代码提交pulls.tab_files=文件变动pulls.reopen_to_merge=请重新开启合并请求来完成合并操作。pulls.merged=已合并pulls.has_merged=该合并请求已经成功合并！pulls.data_broken=该合并请求的数据由于派生仓库的相关信息被删除而被破坏。pulls.is_checking=该合并请求正在进行冲突检查，请稍后再刷新页面。pulls.can_auto_merge_desc=该合并请求可以进行自动合并操作。pulls.cannot_auto_merge_desc=该合并请求存在冲突，无法进行自动合并操作。pulls.cannot_auto_merge_helper=请手动拉取代码变更以解决冲突。pulls.merge_pull_request=合并请求pulls.open_unmerged_pull_exists=`由于已经存在来自相同仓库和合并信息的未合并请求（#%d），您无法执行重新开启操作。`pulls.delete_branch=删除分支pulls.delete_branch_has_new_commits=该分支在完成合并后又推送了新的提交，无法进行删除操作。milestones.new=新的里程碑milestones.open_tab=%d 开启中milestones.close_tab=%d 已关闭milestones.closed=于 %s关闭milestones.no_due_date=暂无截止日期milestones.open=开启milestones.close=关闭milestones.new_subheader=创建里程碑来更好地组织您的工单。milestones.create=创建里程碑milestones.title=标题milestones.desc=描述milestones.due_date=截止日期（可选）milestones.clear=清除milestones.invalid_due_date_format=截止日期的格式错误，必须是 &apos;yyyy-mm-dd&apos; 的形式。milestones.create_success=里程碑 &apos;%s&apos; 创建成功！milestones.edit=编辑里程碑milestones.edit_subheader=使用更加清晰的描述来帮助人们更好地理解里程碑的作用。milestones.cancel=取消milestones.modify=修改里程碑milestones.edit_success=里程碑 &apos;%s&apos; 的修改内容已经生效！milestones.deletion=删除里程碑操作milestones.deletion_desc=删除该里程碑将会移除所有工单中相关的信息。是否继续？milestones.deletion_success=里程碑删除成功！wiki=Wikiwiki.welcome=欢迎使用 Wiki！wiki.welcome_desc=Wiki 是用于共同协作文档的地方，清晰的文档可以帮助其他人深入了解您的项目。wiki.create_first_page=创建第一个页面wiki.page=页面wiki.filter_page=过滤页面wiki.new_page=创建新的页面wiki.default_commit_message=关于此次修改的说明（可选）。wiki.save_page=保存页面wiki.last_commit_info=%s 于 %s 修改了此页面wiki.edit_page_button=修改wiki.new_page_button=新的页面wiki.delete_page_button=删除页面wiki.delete_page_notice_1=此操作将删除页面 &lt;code&gt;&quot;%s&quot;&lt;/code&gt;，请三思而后行。wiki.page_already_exists=相同名称的 Wiki 页面已经存在。wiki.pages=所有页面wiki.last_updated=最后更新于 %ssettings=仓库设置settings.options=基本设置settings.collaboration=管理协作者settings.collaboration.admin=管理权限settings.collaboration.write=可写权限settings.collaboration.read=只读权限settings.collaboration.undefined=未定义settings.branches=管理分支settings.branches_bare=您无法对空仓库进行分支管理，请先推送一些内容到仓库。settings.default_branch=默认分支settings.default_branch_desc=默认分支是被用于代码提交、合并请求和在线编辑的基准分支。settings.update=更新settings.update_default_branch_unsupported=服务器上的 Git 版本不支持修改默认分支。settings.update_default_branch_success=仓库默认分支更新成功！settings.protected_branches=保护分支settings.protected_branches_desc=保护分支不被强制推送、意外删除和限制代码提交白名单。settings.choose_a_branch=选择一个分支...settings.branch_protection=分支保护settings.branch_protection_desc=请选择应用于 &lt;b&gt;%s&lt;/b&gt; 分支的保护选项。settings.protect_this_branch=启用分支保护settings.protect_this_branch_desc=禁止强制推送和删除分支。settings.protect_require_pull_request=要求通过合并请求提交代码settings.protect_require_pull_request_desc=启用该选项后代码将不能直接被推送到此分支，所有的代码提交都必须通过另一个非保护分支发起合并请求进行合并。settings.protect_whitelist_committers=限制可以推送代码的成员settings.protect_whitelist_committers_desc=添加用户或团队到可直接推送代码的白名单，列入白名单中的用户将跳过合并请求检查。settings.protect_whitelist_users=允许推送到此分支的用户settings.protect_whitelist_search_users=搜索用户settings.protect_whitelist_teams=允许其成员推送到此分支的团队settings.protect_whitelist_search_teams=搜索团队settings.update_protect_branch_success=此分支的保护选项更新成功！settings.hooks=管理 Web 钩子settings.githooks=管理 Git 钩子settings.basic_settings=基本设置settings.mirror_settings=镜像设置settings.sync_mirror=立即同步settings.mirror_sync_in_progress=镜像同步请求已经生效，请稍后刷新页面。settings.site=官方网站settings.update_settings=更新设置settings.change_reponame_prompt=该操作将会影响到所有与该仓库有关的链接settings.advanced_settings=高级设置settings.wiki_desc=启用 Wiki 系统settings.use_internal_wiki=使用内置 Wiki 系统settings.allow_public_wiki_desc=当仓库为私有时，允许 Wiki 的公开访问settings.use_external_wiki=使用外部 Wikisettings.external_wiki_url=外部 Wiki 链接settings.external_wiki_url_desc=当访问者单击分页标签时，将会被重定向到该链接。settings.issues_desc=启用工单管理系统settings.use_internal_issue_tracker=使用内置的轻量级工单管理系统settings.allow_public_issues_desc=当仓库为私有时，允许工单的公开访问settings.use_external_issue_tracker=使用外部的工单管理系统settings.external_tracker_url=外部工单管理系统 URLsettings.external_tracker_url_desc=当访问者单击分页标签时，将会被重定向到该链接。settings.tracker_url_format=外部工单管理系统的 URL 格式settings.tracker_issue_style=外部工单管理系统命名风格：settings.tracker_issue_style.numeric=纯数字形式settings.tracker_issue_style.alphanumeric=英文字母数字组合形式settings.tracker_url_format_desc=您可以使用 &lt;code&gt;&#123;user&#125; &#123;repo&#125; &#123;index&#125;&lt;/code&gt; 分别作为用户名、仓库名和工单索引的占位符。settings.pulls_desc=启用合并请求以接受社区贡献settings.danger_zone=危险操作区settings.cannot_fork_to_same_owner=您不能派生仓库到其当前的所有者。settings.new_owner_has_same_repo=新的仓库拥有者已经存在同名仓库！settings.convert=转换为普通仓库settings.convert_desc=您可以将该镜像仓库转换为普通仓库，且此操作不可逆。settings.convert_notices_1=- 该操作会将该镜像仓库转换为普通仓库，且操作不可逆。settings.convert_confirm=确认转换settings.convert_succeed=转换为普通仓库类型成功！settings.transfer=转移仓库所有权settings.transfer_desc=您可以将仓库转移至您拥有管理员权限的帐户或组织。settings.transfer_notices_1=- 如果您将仓库转移给个人用户，您将会丢失操作权限。settings.transfer_notices_2=- 如果您将仓库转移给您是所有者的组织，您的操作权限将被保留。settings.transfer_form_title=请输入以下信息以确认您的操作:settings.wiki_delete=清除 Wiki 数据settings.wiki_delete_desc=清除 Wiki 数据操作不可逆转，请三思而后行。settings.wiki_delete_notices_1=- 此操作将会清除并禁用仓库 %s 的 Wikisettings.wiki_deletion_success=仓库 Wiki 数据清除成功！settings.delete=删除本仓库settings.delete_desc=删除仓库操作不可逆转，请三思而后行。settings.delete_notices_1=- 此操作 &lt;strong&gt;不可以&lt;/strong&gt; 被回滚。settings.delete_notices_2=- 此操作将永久删除该仓库，包括 Git 数据、 工单、 评论和协作者的操作权限。settings.delete_notices_fork_1=- 删除完成后所有的派生仓库都将转换为独立的仓库。settings.deletion_success=仓库删除成功！settings.update_settings_success=仓库设置更新成功！settings.transfer_owner=新拥有者settings.make_transfer=确认转移仓库settings.transfer_succeed=仓库所有权转移成功！settings.confirm_delete=确认删除仓库settings.add_collaborator=增加新的协作者settings.add_collaborator_success=成功添加新的协作者！settings.delete_collaborator=删除settings.collaborator_deletion=删除协作者settings.collaborator_deletion_desc=此用户被删除后将不再拥有相关的协作权限。是否继续？settings.remove_collaborator_success=被操作的协作者已经被收回权限！settings.search_user_placeholder=搜索用户...settings.org_not_allowed_to_be_collaborator=组织不允许被添加为仓库协作者！settings.add_webhook=添加 Web 钩子settings.hooks_desc=Web 钩子允许您设定在 Gogs 上发生指定事件时对指定 URL 发送 POST 通知。查看 &lt;a target=&quot;_blank&quot; href=&quot;%s&quot;&gt;Webhooks 文档&lt;/a&gt; 获取更多信息。settings.webhook_deletion=删除 Web 钩子settings.webhook_deletion_desc=删除该 Web 钩子将会删除与其有关的信息和推送历史。是否继续？settings.webhook_deletion_success=Web 钩子删除成功！settings.webhook.test_delivery=测试推送settings.webhook.test_delivery_desc=生成并推送一个模拟的 Push 事件settings.webhook.test_delivery_success=测试推送已经加入到队列，请耐心等待数秒再刷新推送记录。settings.webhook.redelivery=重新推送settings.webhook.redelivery_success=任务 &apos;%s&apos; 已经被重新加入到推送队列，请耐心等待数秒再刷新推送记录。settings.webhook.request=请求内容settings.webhook.response=响应内容settings.webhook.headers=头信息settings.webhook.payload=推送内容settings.webhook.body=响应体settings.githooks_desc=Git 钩子是由 Git 本身提供的功能，以下为 Gogs 所支持的钩子列表。settings.githook_edit_desc=如果钩子未启动，则会显示样例文件中的内容。如果想要删除某个钩子，则提交空白文本即可。settings.githook_name=钩子名称settings.githook_content=钩子文本settings.update_githook=更新钩子设置settings.add_webhook_desc=我们会通过 &lt;code&gt;POST&lt;/code&gt; 请求将订阅事件信息发送至向指定 URL 地址。您可以设置不同的数据接收方式（JSON 或 &lt;code&gt;x-www-form-urlencoded&lt;/code&gt;）。 请查阅 &lt;a target=&quot;_blank&quot; href=&quot;%s&quot;&gt;Webhooks 文档&lt;/a&gt; 获取更多信息。 settings.payload_url=推送地址settings.content_type=数据格式settings.secret=密钥文本settings.secret_desc=密钥文本将被用于计算推送内容的 SHA256 HMAC 哈希值，并设置为 &lt;code&gt;X-Gogs-Signature&lt;/code&gt; 请求头的值。settings.slack_username=服务名称settings.slack_icon_url=图标 URLsettings.slack_color=颜色代码settings.event_desc=请设置您希望触发 Web 钩子的事件：settings.event_push_only=只推送 &lt;code&gt;push&lt;/code&gt; 事件。settings.event_send_everything=推送 &lt;strong&gt;所有&lt;/strong&gt; 事件settings.event_choose=选择指定的事件settings.event_create=创建settings.event_create_desc=创建分支或标签settings.event_delete=删除settings.event_delete_desc=删除分支或标签settings.event_fork=派生settings.event_fork_desc=仓库被派生settings.event_push=推送settings.event_push_desc=Git 仓库推送settings.event_issues=工单settings.event_issues_desc=工单被开启、关闭、重新开启、编辑、指派、取消指派、更新标签、清除标签、设置里程碑或取消设置里程碑settings.event_issue_comment=工单评论settings.event_issue_comment_desc=工单评论被创建、编辑和删除settings.event_pull_request=合并请求settings.event_pull_request_desc=合并请求被开启、关闭、重新开启、编辑、指派、取消指派、更新标签、清除标签、设置里程碑、取消设置里程碑或代码同步settings.event_release=版本发布settings.event_release_desc=仓库发布新的版本settings.active=是否激活settings.active_helper=当指定事件发生时我们将会触发此 Web 钩子。settings.add_hook_success=Web 钩子添加成功！settings.update_webhook=更新 Web 钩子settings.update_hook_success=Web 钩子更新成功！settings.delete_webhook=删除 Web 钩子settings.recent_deliveries=最近推送记录settings.hook_type=钩子类型settings.add_slack_hook_desc=为您的仓库增加 &lt;a href=&quot;%s&quot;&gt;Slack&lt;/a&gt; 集成。settings.add_discord_hook_desc=为您的仓库增加 &lt;a href=&quot;%s&quot;&gt;Discord&lt;/a&gt; 集成。settings.slack_token=令牌settings.slack_domain=域名settings.slack_channel=频道settings.deploy_keys=管理部署密钥settings.deploy_keys_helper=&lt;b&gt;常识错误！&lt;/b&gt;如果您想要添加的是个人公钥，请将它们添加到您的 &lt;a href=&quot;%s%s&quot;&gt; 用户设置&lt;/a&gt;。settings.add_deploy_key=添加部署密钥settings.deploy_key_desc=部署密钥仅具有只读权限，它在功能上和个人用户的公开密钥有本质区别。settings.no_deploy_keys=您还没有添加任何部署密钥。settings.title=标题settings.deploy_key_content=密钥文本settings.key_been_used=部署密钥已经被使用！settings.key_name_used=使用相同名称的部署密钥已经存在！settings.add_key_success=新的部署密钥 &apos;%s&apos; 添加成功！settings.deploy_key_deletion=删除部署密钥settings.deploy_key_deletion_desc=删除该部署密钥会移除本仓库所以相关的操作权限。是否继续？settings.deploy_key_deletion_success=删除部署密钥成功！diff.browse_source=浏览代码diff.parent=父节点diff.commit=当前提交diff.data_not_available=暂无可用数据diff.show_diff_stats=显示文件统计diff.show_split_view=分列视图diff.show_unified_view=合并视图diff.stats_desc=共有 &lt;strong&gt; %d 个文件被更改&lt;/strong&gt;，包括 &lt;strong&gt;%d 次插入&lt;/strong&gt; 和 &lt;strong&gt;%d 次删除&lt;/strong&gt;diff.bin=二进制diff.view_file=查看文件diff.file_suppressed=文件差异内容过多而无法显示diff.too_many_files=部分文件因为文件数量过多而无法显示release.releases=版本发布release.new_release=发布新版release.draft=草稿release.prerelease=预发行release.edit=编辑release.ahead=在该版本发布之后已有 &lt;strong&gt;%d&lt;/strong&gt; 次代码提交到 %s 分支release.source_code=源代码release.new_subheader=发布版本对产品进行迭代。release.edit_subheader=详细的变更日志可以帮助用户更好地了解产品做了哪些改进。release.tag_name=标签名称release.target=目标分支release.tag_helper=选择或创建一个已经存在的标签release.title=标题release.content=内容release.write=内容编辑release.preview=效果预览release.loading=正在加载...release.prerelease_desc=这是一个预发行版本release.prerelease_helper=我们会告知用户不建议将本次发布投入生产环境使用。release.cancel=取消release.publish=发布版本release.save_draft=保存草稿release.edit_release=编辑发布信息release.delete_release=删除此次发布release.deletion=删除版本发布操作release.deletion_desc=删除该版本发布将会移除相应的 Git 标签。是否继续？release.deletion_success=版本发布删除成功！release.tag_name_already_exist=已经存在使用相同标签进行发布的版本。release.tag_name_invalid=标签名称不是有效的名称。release.downloads=下载附件[org]org_name_holder=组织名称org_full_name_holder=组织全名org_name_helper=伟大的组织都有一个简短而寓意深刻的名字。create_org=创建组织repo_updated=最后更新于people=组织成员invite_someone=邀请他人加入teams=组织团队lower_members=名成员lower_repositories=个仓库create_new_team=创建新的团队org_desc=组织描述team_name=团队名称team_desc=团队描述team_name_helper=您可以使用该名称来通知该组全体成员。team_desc_helper=一句话描述这个团队是做什么的。team_permission_desc=请选择该团队所具有的权限等级：form.name_reserved=组织名称 &apos;%s&apos; 是被保留的。form.name_pattern_not_allowed=组织名称不允许 &apos;%s&apos; 的格式。form.team_name_reserved=团队名称 &apos;%s&apos; 是被保留的。settings=组织设置settings.options=基本设置settings.full_name=组织全名settings.website=官方网站settings.location=所在地区settings.update_settings=更新组织设置settings.update_setting_success=组织设置更新成功！settings.change_orgname_prompt=该操作将会影响到所有与该组织有关的链接settings.update_avatar_success=组织头像更新成功！settings.delete=删除组织settings.delete_account=删除当前组织settings.delete_prompt=删除操作会永久清除该组织的信息，并且 &lt;strong&gt;不可恢复&lt;/strong&gt;！settings.confirm_delete_account=确认删除组织settings.delete_org_title=组织删除操作settings.delete_org_desc=该组织将被永久性删除，您确定要继续操作吗？settings.hooks_desc=在此处添加的 Web 钩子将会应用到该组织下的 &lt;strong&gt;所有仓库&lt;/strong&gt;。members.membership_visibility=成员可见性：members.public=公开成员members.public_helper=设为私有members.private=私有成员members.private_helper=设为公开members.member_role=成员角色：members.owner=管理员members.member=普通成员members.remove=移除成员members.leave=离开组织members.invite_desc=邀请新的用户加入 %s：members.invite_now=立即邀请teams.join=加入团队teams.leave=离开团队teams.read_access=读取权限teams.read_access_helper=这个团队将拥有查看和克隆所属仓库的权限。teams.write_access=写入权限teams.write_access_helper=这个团队将拥有查看、克隆和推送所属仓库的权限。teams.admin_access=管理权限teams.admin_access_helper=这个团队将拥有查看、克隆、推送和添加其他组织成员到团队的权限。teams.no_desc=该团队暂无描述teams.settings=团队设置teams.owners_permission_desc=管理员团队对 &lt;strong&gt;所有仓库&lt;/strong&gt; 具有操作权限，且对组织具有 &lt;strong&gt;管理员权限&lt;/strong&gt;。teams.members=团队成员teams.update_settings=更新团队设置teams.delete_team=删除当前团队teams.add_team_member=添加团队成员teams.delete_team_title=团队删除操作teams.delete_team_desc=删除操作会永久清除有关该团队的信息，您确定要继续操作吗？团队成员可能会失去对某些仓库的操作权限。teams.delete_team_success=指定团队删除成功！teams.read_permission_desc=该团队拥有对所属仓库的 &lt;strong&gt;读取&lt;/strong&gt; 权限，团队成员可以进行查看和克隆等只读操作。teams.write_permission_desc=该团队拥有对所属仓库的 &lt;strong&gt;读取&lt;/strong&gt; 和 &lt;strong&gt;写入&lt;/strong&gt; 的权限。teams.admin_permission_desc=该团队拥有一定的 &lt;strong&gt;管理&lt;/strong&gt; 权限，团队成员可以读取、克隆、推送以及添加其它仓库协作者。teams.repositories=团队仓库teams.search_repo_placeholder=搜索仓库...teams.add_team_repository=添加团队仓库teams.remove_repo=移除仓库teams.add_nonexistent_repo=您尝试添加到团队的仓库不存在，请先创建仓库！[admin]dashboard=控制面板users=用户管理organizations=组织管理repositories=仓库管理authentication=授权认证管理config=应用配置管理notices=系统提示管理monitor=应用监控面板first_page=首页last_page=末页total=总计：%ddashboard.statistic=应用统计数据dashboard.operations=管理员操作dashboard.system_status=系统监视状态dashboard.statistic_info=Gogs 数据库统计：&lt;b&gt;%d&lt;/b&gt; 位用户，&lt;b&gt;%d&lt;/b&gt; 个组织，&lt;b&gt;%d&lt;/b&gt; 个公钥，&lt;b&gt;%d&lt;/b&gt; 个仓库，&lt;b&gt;%d&lt;/b&gt; 个仓库关注，&lt;b&gt;%d&lt;/b&gt; 个赞，&lt;b&gt;%d&lt;/b&gt; 次行为，&lt;b&gt;%d&lt;/b&gt; 条权限记录，&lt;b&gt;%d&lt;/b&gt; 张工单，&lt;b&gt;%d&lt;/b&gt; 次评论，&lt;b&gt;%d&lt;/b&gt; 个社交帐号，&lt;b&gt;%d&lt;/b&gt; 个用户关注，&lt;b&gt;%d&lt;/b&gt; 个镜像，&lt;b&gt;%d&lt;/b&gt; 个版本发布，&lt;b&gt;%d&lt;/b&gt; 个登录源，&lt;b&gt;%d&lt;/b&gt; 个 Web 钩子，&lt;b&gt;%d&lt;/b&gt; 个里程碑，&lt;b&gt;%d&lt;/b&gt; 个标签，&lt;b&gt;%d&lt;/b&gt; 个钩子任务，&lt;b&gt;%d&lt;/b&gt; 个团队，&lt;b&gt;%d&lt;/b&gt; 个更新任务，&lt;b&gt;%d&lt;/b&gt; 个附件。dashboard.operation_name=操作名称dashboard.operation_switch=开关dashboard.operation_run=执行dashboard.clean_unbind_oauth=清理未绑定社交帐号dashboard.clean_unbind_oauth_success=所有未绑定社交数据清除成功！dashboard.delete_inactivate_accounts=删除所有未激活帐户dashboard.delete_inactivate_accounts_success=所有未激活帐号清除成功！dashboard.delete_repo_archives=删除所有仓库存档dashboard.delete_repo_archives_success=所有仓库存档清除成功！dashboard.delete_missing_repos=删除所有丢失 Git 文件的仓库记录dashboard.delete_missing_repos_success=所有丢失 Git 文件的仓库记录删除成功！dashboard.git_gc_repos=对仓库进行垃圾回收dashboard.git_gc_repos_success=所有仓库垃圾回收成功！dashboard.resync_all_sshkeys=重新生成 &apos;.ssh/authorized_keys&apos; 文件（警告：不是 Gogs 的密钥也会被删除）dashboard.resync_all_sshkeys_success=所有公钥重新生成成功！dashboard.resync_all_hooks=重新同步所有仓库的 pre-receive、update 和 post-receive 钩子dashboard.resync_all_hooks_success=所有仓库的 pre-receive、update 和 post-receive 钩子重新同步成功！dashboard.reinit_missing_repos=重新初始化所有丢失 Git 文件的仓库dashboard.reinit_missing_repos_success=所有丢失 Git 文件的仓库重新初始化成功！dashboard.server_uptime=服务运行时间dashboard.current_goroutine=当前 Goroutines 数量dashboard.current_memory_usage=当前内存使用量dashboard.total_memory_allocated=所有被分配的内存dashboard.memory_obtained=内存占用量dashboard.pointer_lookup_times=指针查找次数dashboard.memory_allocate_times=内存分配次数dashboard.memory_free_times=内存释放次数dashboard.current_heap_usage=当前 Heap 内存使用量dashboard.heap_memory_obtained=Heap 内存占用量dashboard.heap_memory_idle=Heap 内存空闲量dashboard.heap_memory_in_use=正在使用的 Heap 内存dashboard.heap_memory_released=被释放的 Heap 内存dashboard.heap_objects=Heap 对象数量dashboard.bootstrap_stack_usage=启动 Stack 使用量dashboard.stack_memory_obtained=被分配的 Stack 内存dashboard.mspan_structures_usage=MSpan 结构内存使用量dashboard.mspan_structures_obtained=被分配的 MSpan 结构内存dashboard.mcache_structures_usage=MCache 结构内存使用量dashboard.mcache_structures_obtained=被分配的 MCache 结构内存dashboard.profiling_bucket_hash_table_obtained=被分配的剖析哈希表内存dashboard.gc_metadata_obtained=被分配的 GC 元数据内存dashboard.other_system_allocation_obtained=其它被分配的系统内存dashboard.next_gc_recycle=下次 GC 内存回收量dashboard.last_gc_time=距离上次 GC 时间dashboard.total_gc_time=GC 执行时间总量dashboard.total_gc_pause=GC 暂停时间总量dashboard.last_gc_pause=上次 GC 暂停时间dashboard.gc_times=GC 执行次数users.user_manage_panel=用户管理面板users.new_account=创建新的帐户users.name=用户名users.activated=已激活users.admin=管理员users.repos=仓库数users.created=创建时间users.send_register_notify=向用户发送注册通知邮件users.new_success=新的用户 &apos;%s&apos; 创建成功！users.edit=编辑users.auth_source=认证源users.local=本地users.auth_login_name=认证登录名称users.password_helper=将值留空使其保持不变。users.update_profile_success=该用户信息更新成功！users.edit_account=编辑用户信息users.max_repo_creation=最大允许创建仓库数量users.max_repo_creation_desc=（设置为 -1 表示使用全局默认值）users.is_activated=该用户已被激活users.prohibit_login=该帐户被禁止登录users.is_admin=该用户具有管理员权限users.allow_git_hook=该用户具有创建 Git 钩子的权限users.allow_import_local=该用户具有导入本地仓库的权限users.update_profile=更新用户信息users.delete_account=删除该用户users.still_own_repo=该帐户仍然是某些仓库的拥有者，您必须先转移或删除它们才能执行删除帐户操作！users.still_has_org=该帐户仍旧是某些组织的成员，您必须先使其离开或删除组织。users.deletion_success=用户删除成功！orgs.org_manage_panel=组织管理面板orgs.name=组织名称orgs.teams=团队数orgs.members=成员数repos.repo_manage_panel=仓库管理界面repos.owner=所有者repos.name=仓库名称repos.private=私有库repos.watches=关注数repos.stars=点赞数repos.issues=工单数repos.size=用量auths.auth_manage_panel=认证管理面板auths.new=添加新的源auths.name=认证名称auths.type=认证类型auths.enabled=已启用auths.updated=最后更新时间auths.auth_type=认证类型auths.auth_name=认证名称auths.security_protocol=安全协议auths.domain=域名auths.host=主机地址auths.port=主机端口auths.bind_dn=绑定 DNauths.bind_password=绑定密码auths.bind_password_helper=警告：该密码将会以明文的形式保存在数据库中。请不要使用拥有高权限的帐户！auths.user_base=用户搜索基准auths.user_dn=User DNauths.attribute_username=用户名属性auths.attribute_username_placeholder=留空表示使用用户登录时所使用的用户名auths.attribute_name=名字属性auths.attribute_surname=姓氏属性auths.attribute_mail=邮箱属性auths.verify_group_membership=验证组成员身份auths.group_search_base_dn=组搜索基准 DNauths.group_filter=组名称过滤auths.group_attribute_contain_user_list=包含用户的组属性auths.user_attribute_listed_in_group=组内用户属性auths.attributes_in_bind=从 Bind DN 中拉取属性信息auths.filter=用户过滤规则auths.admin_filter=管理员过滤规则auths.ms_ad_sa=Ms Ad SAauths.smtp_auth=SMTP 认证类型auths.smtphost=SMTP 主机地址auths.smtpport=SMTP 主机端口auths.allowed_domains=域名白名单auths.allowed_domains_helper=将值留空表示不对域名做任何限制。多个域名之间需要使用逗号 &apos;,&apos; 分隔。auths.enable_tls=启用 TLS 加密auths.skip_tls_verify=忽略 TLS 验证auths.pam_service_name=PAM 服务名称auths.enable_auto_register=允许授权用户自动注册auths.tips=帮助提示auths.edit=编辑认证设置auths.activated=该授权认证已经启用auths.new_success=新的授权源 &quot;%s&quot; 添加成功！auths.update_success=认证设置更新成功！auths.update=更新认证设置auths.delete=删除该认证auths.delete_auth_title=删除认证操作auths.delete_auth_desc=该认证将被删除。是否继续？auths.still_in_used=此认证仍旧与一些用户有关联，请先删除或者将这些用户转换为其它登录类型。auths.deletion_success=授权源删除成功！auths.login_source_exist=登录源 &apos;%s&apos; 已存在。config.server_config=服务器配置config.app_name=应用名称config.app_ver=应用版本config.app_url=应用 URLconfig.domain=应用域名config.offline_mode=离线模式config.disable_router_log=关闭路由日志config.run_user=运行用户config.run_mode=运行模式config.git_version=Git 版本config.static_file_root_path=静态文件根目录config.log_file_root_path=日志文件根目录config.reverse_auth_user=反向代理认证config.ssh_config=SSH 配置config.ssh_enabled=启用服务config.ssh_start_builtin_server=启用内置服务config.ssh_domain=域名config.ssh_port=端口config.ssh_listen_port=监听端口config.ssh_root_path=根目录config.ssh_key_test_path=密钥测试路径config.ssh_keygen_path=密钥生成器（&apos;ssh-keygen&apos;）路径config.ssh_minimum_key_size_check=密钥最小长度检查config.ssh_minimum_key_sizes=密钥最小长度限制config.repo_config=仓库配置config.repo_root_path=仓库根目录config.script_type=脚本类型config.repo_force_private=强制设为私有config.max_creation_limit=可创建数量限制config.preferred_licenses=推荐许可证config.disable_http_git=禁用 HTTP Git 操作config.enable_local_path_migration=启用本地路径迁移config.commits_fetch_concurrency=代码提交拉取并发量config.db_config=数据库配置config.db_type=数据库类型config.db_host=主机地址config.db_name=数据库名称config.db_user=连接用户config.db_ssl_mode=SSL 模式config.db_ssl_mode_helper=（仅限 &quot;postgres&quot; 使用）config.db_path=数据库路径config.db_path_helper=（用于 &quot;sqlite3&quot; 和 &quot;tidb&quot;）config.service_config=服务配置config.register_email_confirm=注册邮件确认config.disable_register=关闭注册功能config.show_registration_button=显示注册按钮config.require_sign_in_view=强制登录浏览config.mail_notify=邮件通知提醒config.disable_key_size_check=禁用密钥最小长度检查config.enable_captcha=启用验证码服务config.active_code_lives=激活用户链接有效期config.reset_password_code_lives=重置密码链接有效期config.webhook_config=Web 钩子配置config.queue_length=队列长度config.deliver_timeout=推送超时config.skip_tls_verify=忽略 TLS 验证config.mailer_config=邮件配置config.mailer_enabled=启用服务config.mailer_disable_helo=禁用 HELO 操作config.mailer_name=发送者名称config.mailer_host=邮件主机地址config.mailer_user=发送者帐号config.send_test_mail=发送测试邮件config.test_mail_failed=发送测试邮件至 &apos;%s&apos; 时失败：%vconfig.test_mail_sent=测试邮件已经发送至 &apos;%s&apos;。config.oauth_config=社交帐号配置config.oauth_enabled=启用服务config.cache_config=Cache 配置config.cache_adapter=Cache 适配器config.cache_interval=Cache 周期config.cache_conn=Cache 连接字符串config.session_config=Session 配置config.session_provider=Session 提供者config.provider_config=提供者配置config.cookie_name=Cookie 名称config.enable_set_cookie=启用设置 Cookieconfig.gc_interval_time=GC 周期config.session_life_time=Session 生命周期config.https_only=仅限 HTTPSconfig.cookie_life_time=Cookie 生命周期config.picture_config=图片配置config.picture_service=图片服务config.disable_gravatar=禁用 Gravatar 头像config.enable_federated_avatar=启用 Federated Avatarsconfig.git_config=Git 配置config.git_disable_diff_highlight=禁用差异对比语法高亮config.git_max_diff_lines=差异对比显示的最大行数（单个文件）config.git_max_diff_line_characters=差异对比显示的最大字符数（单行）config.git_max_diff_files=差异对比显示的最大文件数config.git_gc_args=GC 参数config.git_migrate_timeout=迁移操作超时config.git_mirror_timeout=镜像更新操作超时config.git_clone_timeout=克隆操作超时config.git_pull_timeout=拉取操作超时config.git_gc_timeout=GC 操作超时config.log_config=日志配置config.log_mode=模式config.log_options=选项monitor.cron=Cron 任务monitor.name=任务名称monitor.schedule=任务安排monitor.next=下次执行时间monitor.previous=上次执行时间monitor.execute_times=执行次数monitor.process=运行中进程monitor.desc=进程描述monitor.start=开始时间monitor.execute_time=已执行时间notices.system_notice_list=系统提示管理notices.view_detail_header=查看提示详情notices.actions=操作notices.select_all=选中全部notices.deselect_all=取消所有选中notices.inverse_selection=反向选中notices.delete_selected=删除选中项notices.delete_all=删除所有提示notices.type=提示类型notices.type_1=仓库notices.desc=描述notices.op=操作notices.delete_success=系统提示删除成功！[action]create_repo=创建了仓库 &lt;a href=&quot;%s&quot;&gt;%s&lt;/a&gt;fork_repo=派生了仓库 &lt;a href=&quot;%s&quot;&gt;%s&lt;/a&gt;rename_repo=重命名仓库 &lt;code&gt;%[1]s&lt;/code&gt; 为 &lt;a href=&quot;%[2]s&quot;&gt;%[3]s&lt;/a&gt;commit_repo=推送了 &lt;a href=&quot;%[1]s/src/%[2]s&quot;&gt;%[3]s&lt;/a&gt; 分支的代码到 &lt;a href=&quot;%[1]s&quot;&gt;%[4]s&lt;/a&gt;compare_commits=对比 %d 次代码提交transfer_repo=将仓库 &lt;code&gt;%s&lt;/code&gt; 转移至 &lt;a href=&quot;%s&quot;&gt;%s&lt;/a&gt;create_issue=`创建了工单 &lt;a href=&quot;%s/issues/%s&quot;&gt;%s#%[2]s&lt;/a&gt;`close_issue=`关闭了工单 &lt;a href=&quot;%s/issues/%s&quot;&gt;%s#%[2]s&lt;/a&gt;`reopen_issue=`重新开启了工单 &lt;a href=&quot;%s/issues/%s&quot;&gt;%s#%[2]s&lt;/a&gt;`comment_issue=`评论了工单 &lt;a href=&quot;%s/issues/%s&quot;&gt;%s#%[2]s&lt;/a&gt;`create_pull_request=`创建了合并请求 &lt;a href=&quot;%s/pulls/%s&quot;&gt;%s#%[2]s&lt;/a&gt;`close_pull_request=`关闭了合并请求 &lt;a href=&quot;%s/pulls/%s&quot;&gt;%s#%[2]s&lt;/a&gt;`reopen_pull_request=`重新开启了合并请求 &lt;a href=&quot;%s/pulls/%s&quot;&gt;%s#%[2]s&lt;/a&gt;`merge_pull_request=`合并了合并请求 &lt;a href=&quot;%s/pulls/%s&quot;&gt;%s#%[2]s&lt;/a&gt;`create_branch=创建了新的分支 &lt;a href=&quot;%[1]s/src/%[2]s&quot;&gt;%[3]s&lt;/a&gt; 到 &lt;a href=&quot;%[1]s&quot;&gt;%[4]s&lt;/a&gt;delete_branch=删除了 &lt;a href=&quot;%[1]s&quot;&gt;%[3]s&lt;/a&gt; 的分支 &lt;code&gt;%[2]s&lt;/code&gt;push_tag=推送了标签 &lt;a href=&quot;%s/src/%s&quot;&gt;%[2]s&lt;/a&gt; 到 &lt;a href=&quot;%[1]s&quot;&gt;%[3]s&lt;/a&gt;delete_tag=删除了 &lt;a href=&quot;%[1]s&quot;&gt;%[3]s&lt;/a&gt; 的标签 &lt;code&gt;%[2]s&lt;/code&gt;[tool]ago=之前from_now=之后now=刚刚1s=1 秒%s1m=1 分钟%s1h=1 小时%s1d=1 天%s1w=1 周%s1mon=1 月%s1y=1 年%sseconds=%d 秒%sminutes=%d 分钟%shours=%d 小时%sdays=%d 天%sweeks=%d 周%smonths=%d 月%syears=%d 年%sraw_seconds=秒raw_minutes=分钟[dropzone]default_message=拖曳文件到此处或单击上传invalid_input_type=您不能上传该类型的文件file_too_big=文件体积（&#123;&#123;filesize&#125;&#125; MB）超过了最大允许体积（&#123;&#123;maxFilesize&#125;&#125; MB）remove_file=移除文件]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Gogs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[配置brew为阿里源]]></title>
    <url>%2F2019%2F01%2F30%2Fmirror-aliyun-brew%2F</url>
    <content type="text"><![CDATA[homebrew快速配置Alibaba的Homebrew 首先确保你已经安装好了 Homebrew 了, 如果没有, 请参考 OPSX 指引页的 Homebrew 文档; 然后你只需要粘贴下述命令在对应终端运行. Bash 终端配置替换brew.git:12345678910cd "$(brew --repo)"git remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git# 替换homebrew-core.git:cd "$(brew --repo)/Library/Taps/homebrew/homebrew-core"git remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git# 应用生效brew update# 替换homebrew-bottles:echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles' &gt;&gt; ~/.bash_profilesource ~/.bash_profile Zsh 终端配置1234567891011# 替换brew.git:cd "$(brew --repo)"git remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git# 替换homebrew-core.git:cd "$(brew --repo)/Library/Taps/homebrew/homebrew-core"git remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git# 应用生效brew update# 替换homebrew-bottles:echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles' &gt;&gt; ~/.zshrcsource ~/.zshrc 恢复默认配置出于某些场景, 可能需要回退到默认配置, 你可以通过下述方式回退到默认配置. 首先执行下述命令: 123456# 重置brew.git:$ cd "$(brew --repo)"$ git remote set-url origin https://github.com/Homebrew/brew.git# 重置homebrew-core.git:$ cd "$(brew --repo)/Library/Taps/homebrew/homebrew-core"$ git remote set-url origin https://github.com/Homebrew/homebrew-core.git 然后删掉 HOMEBREW_BOTTLE_DOMAIN 环境变量,将你终端文件 1~/.bash_profile 或者~/.zshrc中HOMEBREW_BOTTLE_DOMAIN行删掉, 并执行 1source ~/.bash_profile 或者 1source ~/.zshrc]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git 更新 fork 的代码]]></title>
    <url>%2F2019%2F01%2F20%2Fgit-fetch-upstream%2F</url>
    <content type="text"><![CDATA[git 更新 fork 的代码使用git命令合并 12345git remote -vgit remote add upstream git@github.com:xxx/xxx.git # 后面的地址是fork的源地址，提示没有权限用httpsgit fetch upstream # 更新后本地会多一个upstream/master分支git merge upstream/master # 合并upstream/master到本地master分支git push]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>fetch upstream</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自动化程序部署方案]]></title>
    <url>%2F2018%2F06%2F11%2FAutomaticDeployment%2F</url>
    <content type="text"><![CDATA[自动化程序部署方案原理：当我们在github开启Webhooks服务后，每次我们触发动作后，github就会向我们指定的服务器发送POST请求，然后我们的接收webhook请求的服务器就执行我们定义的shell程序，更新我们的APP。下面是具体的步骤。 安装 nginxsudo apt-get install nginx nginx是我们转发请求的代理服务器，我们接收webhook的服务器监听的一般不是80端口，但是绑定域名的A记录是不可以指定端口的。 所以，这里使用nginx其实是把某个域名发过来的请求，转发到我们指定的端口。 配置 nginx 转发规则首先，找到nginx的配置文件位置 123# nginx -tnginx: the configuration file /etc/nginx/nginx.conf syntax is oknginx: configuration file /etc/nginx/nginx.conf test is successful 执行上面的命令就可以看到我的配置文件是位于/etc/nginx/nginx.conf 打开配置文件，我们可以看到有一句话是说引入/etc/nginx/conf.d/这个文件夹下所有的.conf文件 1include /etc/nginx/conf.d/*.conf; 所以，我们可以在这个文件夹下新建一个配置文件，比如叫做webhook.conf 接下来需要在配置文件中添加我们接收webhook请求的转发规则，填入一下内容： 12345678910server &#123; listen 80; # 监听80端口 server_name webhook.application.com; # 转发这个域名的请求 location / &#123; proxy_pass http://127.0.0.1:5000; # 转发到这个端口 proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; &#125;&#125; 启动 nginx 相关命令123/etc/init.d/nginx start # 开启服务/etc/init.d/nginx restart # 重启服务/etc/init.d/nginx stop # 停止服务 启动一个接收webhook的服务 在任意位置新建app.py文件，输入一下内容 123456789101112131415#!/usr/bin/env python# encoding: utf-8from flask import Flask, requestimport shapp = Flask(__name__)@app.route('/webhook/git_hook', methods=['POST']) # 注册路由def git_hook(): if request.method == 'POST': # 如果是POST请求，这重新部署程序 sh.cd('/root/Code/Python/Lx.Website.API/') # 进入程序目录 sh.git.pull(['origin', 'master']) # 拉取master分支 return '&lt;pre&gt;pull&lt;/pre&gt;' else: return r'&lt;pre&gt;Wrong method:' + request.method + ' &lt;/pre&gt;'if __name__ == '__main__': app.run(host='0.0.0.0', port=5000) 这里需要注意的是，最后一行的端口号必须是nginx配置的那个端口号，这里只是最简单程序 然后需要安装python的三方库 1pip install flask sh 运行app.py 1nohup python app.py 在github开启webhooks服务在仓库的设置里面找到webhooks，点击添加服务，然后开始配置 注意这里链接是nginx里面配置的域名，加上app.py里面注册的路由 测试现在可以push一点改动，查看是否成功]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pipenv和autoenv使用]]></title>
    <url>%2F2018%2F04%2F24%2Fpipenv-autoenv%E7%AE%A1%E7%90%86python%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[pipenv 介绍 管理安装依赖。 生成并检查哈希文件以锁定依赖关系。 安装pyenv后，自动安装指定的Python版本。 通过查找Pipfile自动地递归地找到项目(这句不是太懂)。 如果不存在Pipfile，则自动生成Pipfile文件。 在固定位置自动创建virtualenv。 当安装或者删除包时，自动添加/删除Pipfile中的配置。 如果有.env文件，并且安装了autoenv的话，进入文件夹会自动开启虚拟环境。 安装pipenvMac 安装1brew install pipenv Ubuntu 17.10 安装1234sudo apt install software-properties-common python-software-propertiessudo add-apt-repository ppa:pypa/ppasudo apt updatesudo apt install pipenv pip 安装1pip install pipenv pipenv使用12345678910111213141516171819202122232425262728293031323334353637383940$ pipenvUsage: pipenv [OPTIONS] COMMAND [ARGS]...Options: --where 输出项目信息. --venv 输出虚拟环境信息. --py 输出Python解释器信息. --envs 输出环境变量选项. --rm 删除虚拟环境. --bare 最小化输出. --completion Output completion (to be eval&apos;d)(这句不是太懂). --man 展示使用手册(出现一个使用说明，然后按q退出). --three / --two 指定python2还是python3创建虚拟环境. --python TEXT 指定python版本创建虚拟环境. --site-packages 把当前环境中的包也添加到即将建立的虚拟环境中. --version 展示版本. -h, --help 展示帮助信息.Usage Examples: 使用pyehon3.6创建虚拟环境 $ pipenv --python 3.6 安装所有依赖包括dev $ pipenv install --dev 创建一个预发布版本的Pipfile $ pipenv lock --pre 以图表展示虚拟环境的依赖关系 $ pipenv graph 对依赖关系做安全检查 $ pipenv check 安装本地的setup.py到你的虚拟环境/Pipfile $ pipenv install -e . 生成库列表，一般后面加上 &gt; filename，输入到文件里 $ pipenv run pip freeze]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>pipenv</tag>
        <tag>autoenv</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript 扩展]]></title>
    <url>%2F2018%2F03%2F12%2FExtendJS%2F</url>
    <content type="text"><![CDATA[JavaScript 扩展记录备用 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162(function (d, w, $) &#123; Date.prototype.addDays = function (days) &#123; var dat = new Date(this.valueOf()); dat.setDate(dat.getDate() + days); return dat; &#125; Date.prototype.AddMonth = function (numberOfMonths) &#123; var d = this; if (d.getMonth() + numberOfMonths + 1 === 0) &#123; d.setFullYear(d.getFullYear() - 1, 11); return d; &#125; else &#123; d.setMonth(d.getMonth() + numberOfMonths + 1); return d; &#125; &#125; Date.prototype.Format = function (fmt) &#123; var o = &#123; "M+": this.getMonth() + 1, "d+": this.getDate(), "h+": this.getHours(), "m+": this.getMinutes(), "s+": this.getSeconds(), "q+": Math.floor((this.getMonth() + 3) / 3), "S": this.getMilliseconds() &#125;; if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length)); for (var k in o) if (new RegExp("(" + k + ")").test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length === 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length))); return fmt; &#125; $.deepClone = function (source) &#123; if(!source || typeof source !== 'object')&#123; throw new Error('error arguments', 'shallowClone'); &#125; var targetObj = source.constructor === Array ? [] : &#123;&#125;; for(var keys in source)&#123; if(source.hasOwnProperty(keys))&#123; if(source[keys] &amp;&amp; typeof source[keys] === 'object')&#123; targetObj[keys] = source[keys].constructor === Array ? [] : &#123;&#125;; targetObj[keys] = $.deepClone(source[keys]); &#125;else&#123; targetObj[keys] = source[keys]; &#125; &#125; &#125; return targetObj; &#125; $.createElementFromHTML(htmlString) &#123; var div = document.createElement('div'); div.innerHTML = htmlString.trim(); // Change this to div.childNodes to support multiple top-level nodes return div.firstChild; &#125;&#125;)(document, window, $);]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git 常用操作]]></title>
    <url>%2F2018%2F03%2F12%2FGit-%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[Git 常用操作Git 是一个强大的分布式版本控制系统，但是命令相对复杂，这里记录常用命令 12345678910111213141516171819202122232425262728293031323334353637383940414243mkdir git-tutorial //新建文件夹git status //查看仓库的状态touch README.md //新建文件README.mdgit add README.md //将文件README.md添加到暂存区git log //显示git历史记录，注意所有log查看的内容都用Q键退出git log --pretty=short //显示git历史简要记录git log -p //显示git历史具体差别git log -p README.md //显示README.md文件的具体差别git diff README.md //比较README.md最近一次差别git diff HEAD //查看本次未提交和上次之间的差别，可以每次提交前执行次命令git branch //查看所有分支git checkout -b feature-A //建立一个名为feature-A的分支并切换到这个分支git branch feature-A //新建一个名为feature-A的分支git checkout feature-A //切换到feature-A分支git checkout - //切换到上一个分支git log --graph //以图表形式查看更改git merge --no-ff fix-B //当前分支合并fix-B，可能会存在冲突，解决就好了git reset --hard b8de79 //把git状态切换到b8de79的状态，b8de79是哈希值，可以从log里面获取git commit --amend //修改提交信息git commit -am 'commit message' //相当于add 和 commitgit rebase -i HEAD~2 //将最近2个提交合并，之后会出现一个文本，将pick修改为fixupgit submodule update --init --recursive //初始化并拉取子仓库 设置 git 代理12git config --global http.proxy 'socks5://127.0.0.1:1080'git config --global https.proxy 'socks5://127.0.0.1:1080' 如果需要设置账号和密码 1git config --global http.proxy http://proxyuser:proxypwd@proxy.server.com:port 撤销 git 代理12git config --global --unset http.proxygit config --global --unset https.proxy]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安装 oh my zsh]]></title>
    <url>%2F2018%2F03%2F12%2FMac%20%E5%AE%89%E8%A3%85%20oh-my-zsh%2F</url>
    <content type="text"><![CDATA[1. 安装 zsh + oh-my zsh1sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)" 或者： 1sh -c "$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)" 2. 安装 Tomorrow OS X Terminal Color Schemas https://github.com/chriskempson/tomorrow-theme 直接访问上面的链接地址下载即可，对于 OS X Terminal 的，直接下载之后，双击安装即可，如果觉得麻烦，也可以直接下载我打包好的： Tomorrow OS X Terminal Color Schemas.zip 3. 安装 Pure1npm install --global pure-prompt 安装完成之后，进入到 oh-my-zsh 的 custom 目录下，我的就是默认的，然后： 1ln -s /path/to/pure.zsh 之后修改 oh-my-zsh 的主题为 pure 1vi ~/.zshrc 修改： 1ZSH_THEME="pure"` 4. 安装 zsh-syntax-highlighting1git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting 修改 ~/.zshrc 1plugins = (...plugins zsh-syntax-highlighting)]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>oh my zsh</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pyenv 安装及常用命令]]></title>
    <url>%2F2018%2F03%2F12%2FPyenv-%E5%AE%89%E8%A3%85%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[pyenv 安装及常用命令Ubuntu 安装 若没安装git则需要先安装 1sudo apt install git 克隆pyenv仓库 1git clone https://github.com/yyuu/pyenv.git ~/.pyenv 将PYENV_ROOT和pyenv init加入bash的~/.bashrc（或zsh的~/.zshrc） 123echo 'export PATH=~/.pyenv/bin:$PATH' &gt;&gt; ~/.bashrcecho 'export PYENV_ROOT=~/.pyenv' &gt;&gt; ~/.bashrcecho 'eval "$(pyenv init -)"' &gt;&gt; ~/.bashrc 或者使用`vim`编辑`~/.bashrc`（或zsh的`~/.zshrc`），在文件最后加上 1234export PATH=~/.pyenv/bin:$PATHexport PYENV_ROOT=~/.pyenveval "$(pyenv init -)"eval "$(pyenv virtualenv-init -)" 激活pyenv 1source ~/.bashrc（或zsh的`~/.zshrc`） Mac 安装 更新brew 1brew update 使用brew安装pyenv 1brew install pyenv 配置环境变量 12echo 'eval "$(pyenv init -)"' &gt;&gt; ~/.zshrcecho 'eval "$(pyenv virtualenv-init -)"' &gt;&gt; ~/.zshrc 或`vim`直接编辑 激活环境 1source ~/.zshrc 常用命令12345678pyenv install --list # 列出可安装版本pyenv install &lt;version&gt; # 安装对应版本pyenv install -v &lt;version&gt; # 安装对应版本，若发生错误，可以显示详细的错误信息pyenv versions # 显示当前使用的python版本pyenv which python # 显示当前python安装路径pyenv global &lt;version&gt; # 设置默认Python版本pyenv local &lt;env&gt; # 当前路径创建一个.python-version文件, 以后进入这个目录自动切换为该版本，注意&lt;env&gt; 必须为虚拟环境，不能是python版本pyenv shell &lt;version&gt; # 当前shell的session中启用某版本，优先级高于global 及 local 使用virtualenv12345678910111213pyenv virtualenv env # 从默认版本创建虚拟环境pyenv virtualenv 3.6.4 env-3.6.4 # 创建3.6.4版本的虚拟环境pyenv activate env-3.6.4 # 激活 env-3.6.4 这个虚拟环境pyenv deactivate # 停用当前的虚拟环境# 自动激活# 使用pyenv local 虚拟环境名# 会把`虚拟环境名`写入当前目录的.python-version文件中# 关闭自动激活 -&gt; pyenv deactivate# 启动自动激活 -&gt; pyenv activate env-3.6.4pyenv local env-3.6.4pyenv uninstall env-3.6.4 # 删除 env-3.6.4 这个虚拟环境 实践过程中发现创建虚拟环境后会多出两个，但是可以不用管，好像没什么影响 发现的错误 莫名其妙的BUILD FEILED (Ubuntu 16.04 using python-build 1.2.2) 问题是缺少依赖包，各个系统见以下链接 1https://github.com/pyenv/pyenv/wiki/Common-build-problems zipimport.ZipImportError: can&#39;t decompress data; zlib not available 还是缺少依赖包 1sudo apt-get install zlib1g-dev ​ pyenv: no such command virtualenv-init &gt; 没有下载`pyenv-virtualenv` 1git clone https://github.com/yyuu/pyenv-virtualenv.git ~/.pyenv/plugins/pyenv-virtualenv]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Pyenv</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python 常用]]></title>
    <url>%2F2018%2F03%2F12%2FPython-%E5%B8%B8%E7%94%A8%E5%B0%8F%E4%B8%9C%E8%A5%BF%2F</url>
    <content type="text"><![CDATA[Python 常用 本地开启FTP服务 python3 -m http.server 4321]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nerdtree 快捷键]]></title>
    <url>%2F2018%2F03%2F12%2Fnerdtree-%E5%BF%AB%E6%8D%B7%E9%94%AE%2F</url>
    <content type="text"><![CDATA[nerdtree 快捷键nerdtree 可以让你浏览文件系统并打开文件或目录。你可以通过键盘或鼠标控制它以树状图显示文件系统，也可以在其中进行一些简单的文件系统操作。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162ctrl + w + h 光标 focus 左侧树形目录ctrl + w + l 光标 focus 右侧文件显示窗口ctrl + w + w 光标自动在左右侧窗口切换 #！！！ctrl + w + r 移动当前窗口的布局位置o 在已有窗口中打开文件、目录或书签，并跳到该窗口go 在已有窗口 中打开文件、目录或书签，但不跳到该窗口t 在新 Tab 中打开选中文件/书签，并跳到新 TabT 在新 Tab 中打开选中文件/书签，但不跳到新 Tabi split 一个新窗口打开选中文件，并跳到该窗口gi split 一个新窗口打开选中文件，但不跳到该窗口s vsplit 一个新窗口打开选中文件，并跳到该窗口gs vsplit 一个新 窗口打开选中文件，但不跳到该窗口! 执行当前文件O 递归打开选中 结点下的所有目录x 合拢选中结点的父目录X 递归 合拢选中结点下的所有目录e Edit the current dif双击 相当于 NERDTree-o中键 对文件相当于 NERDTree-i，对目录相当于 NERDTree-eD 删除当前书签P 跳到根结点p 跳到父结点K 跳到当前目录下同级的第一个结点J 跳到当前目录下同级的最后一个结点k 跳到当前目录下同级的前一个结点j 跳到当前目录下同级的后一个结点C 将选中目录或选中文件的父目录设为根结点u 将当前根结点的父目录设为根目录，并变成合拢原根结点U 将当前根结点的父目录设为根目录，但保持展开原根结点r 递归刷新选中目录R 递归刷新根结点m 显示文件系统菜单 #！！！然后根据提示进行文件的操作如新建，重命名等cd 将 CWD 设为选中目录I 切换是否显示隐藏文件f 切换是否使用文件过滤器F 切换是否显示文件B 切换是否显示书签q 关闭 NerdTree 窗口? 切换是否显示 Quick Help:tabnew [++opt选项] ［＋cmd］ 文件 建立对指定文件新的tab:tabc 关闭当前的 tab:tabo 关闭所有其他的 tab:tabs 查看所有打开的 tab:tabp 前一个 tab:tabn 后一个 tab标准模式下：gT 前一个 tabgt 后一个 tabMacVim 还可以借助快捷键来完成 tab 的关闭、切换cmd+w 关闭当前的 tabcmd+&#123; 前一个 tabcmd+&#125; 后一个 tab]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>nerdtree</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSH 免密登录远程服务器]]></title>
    <url>%2F2018%2F03%2F12%2Fssh-%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%2F</url>
    <content type="text"><![CDATA[在本地机器创建公钥打开万能的终端，执行如下命令，无视一切输出，一路欢快地回车即可。 1ssh-keygen -t rsa -C 'your email@domain.com' -t 指定密钥类型，默认即 rsa ，可以省略-C 设置注释文字，比如你的邮箱 2. 将公钥复制到ssh服务器将前一步骤生成的公钥~/id_rsa.pub文件，复制到ssh服务器对应用户下的~/.ssh/authorized_keys文件,可以有多种方式，这里只介绍常用的三种。 [适用于osx系统]使用ssh-copy-id-for-OSX工具将公钥复制至ssh服务器 12brew install ssh-copy-idssh-copy-id username@hostname #将username和hostname替换为你的ssh服务器用户名和IP 当ssh服务器username用户目录下尚未有.ssh目录时使用此方式 1cat ~/.ssh/id_rsa.pub | ssh username@hostname "mkdir ~/.ssh; cat &gt;&gt; ~/.ssh/authorized_keys" 通用方式 1234scp ~/.ssh/id_rsa.pub username@hostname:~/ #将公钥文件复制至ssh服务器ssh username@hostname #使用用户名和密码方式登录至ssh服务器mkdir .ssh #若.ssh目录已存在，可省略此步cat id_rsa.pub &gt;&gt; .ssh/authorized_keys #将公钥文件id_rsa.pub文件内容追加到authorized_keys文件 3. 快捷登录完成以上步骤后，即可使用以下命令直接登录ssh服务器，妈妈再也不用担心你记不住密码了 1ssh username@hostname #将username替换为你的ssh服务器用户名，hostname替换为服务器的ip 但是，每次仍然需要输入ssh username@hostname，仍算不上最优的解决方案，要是能实现一键登录或一条命令登录最好不过了，下面来看看都有那些解决方法 ssh本身也提供了一种快捷的方式来解决这个问题，往~/.ssh/config配置文件添加你的ssh服务器信息即可 1vim ~/.ssh/config #若没有该文件，直接新建即可 添加文件内容格式如下： 12345Host alias #自定义别名 HostName hostname #替换为你的ssh服务器ip或domain Port port #ssh服务器端口，默认为22 User user #ssh服务器用户名 IdentityFile ~/.ssh/id_rsa #第一个步骤生成的公钥文件对应的私钥文件 保存文件退出后，即可使用别名登录ssh服务器 1ssh alias #alias是你在~/.ssh/config文件配置的别名 若有多个ssh账号需要配置，只要在~/.ssh/config空行再写即可，如下: 12345678910Host foo HostName 192.168.2.222 Port 22 User test IdentityFile ~/.ssh/id_rsaHost alias HostName hostname Port port User user 如果你本地终端使用的是zsh，那就太简单不过了，直接给zsh添加一条别名 123echo "alias ssh-to-username='ssh username@hostname'" &gt;&gt; ~/.zshrc #将username和hostname替换为你的服务器信息source ~/.zshrc #重新加载更改后的zshrc文件ssh-to-username #使用别名，一条命令即可登录你的ssh服务器 如果你本地终端使用的是iterm2还可以添加Profile实现一键登录，具体步骤此处略过参考链接]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用ssh传输文件]]></title>
    <url>%2F2018%2F03%2F12%2Fscp-%E4%BC%A0%E9%80%81%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[利用ssh传输文件在linux下一般用scp这个命令来通过ssh传输文件。 1、从服务器上下载文件1scp username@servername:/path/filename /var/www/local_dir #(本地目录) 例如scp root@192.168.0.101:/var/www/test.txt 把192.168.0.101上的/var/www/test.txt 的文件下载到/var/www/local_dir（本地目录） 2、上传本地文件到服务器1scp /path/filename username@servername:/path 例如scp /var/www/test.php root@192.168.0.101:/var/www/ 把本机/var/www/目录下的test.php文件上传到192.168.0.101这台服务器上的/var/www/目录中 3、从服务器下载整个目录1scp -r username@servername:/var/www/remote_dir/(远程目录) /var/www/local_dir (本地目录) 例如:scp -r root@192.168.0.101:/var/www/test /var/www/ 4、上传目录到服务器1scp -r local_dir username@servername:remote_dir 例如：scp -r test root@192.168.0.101:/var/www/ 把当前目录下的test目录上传到服务器的/var/www/ 目录]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vim 使用记录]]></title>
    <url>%2F2018%2F03%2F12%2Fvim-%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[vim 使用记录插件安装 获取Vundel 1git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim 将Vundel拷贝到目录~/.vim/bundle/下 编辑.vimrc文件，若没有则新建 1vim ~/.vimrc 在文件开始处添加如下内容 123456789101112131415161718192021set nocompatible &quot; requiredfiletype off &quot; required&quot; set the runtime path to include Vundle and initializeset rtp+=~/.vim/bundle/Vundle.vimcall vundle#begin()&quot; alternatively, pass a path where Vundle should install plugins&quot;call vundle#begin(&apos;~/some/path/here&apos;)&quot; let Vundle manage Vundle, requiredPlugin &apos;gmarik/Vundle.vim&apos;&quot; add all your plugins here (note older versions of Vundle&quot; used Bundle instead of Plugin)&quot; ...&quot; All of your Plugins must be added before the following linecall vundle#end() &quot; requiredfiletype plugin indent on &quot; required 保存后重新进入.vimrc执行：PluginInstall 分割窗口 在本窗口下方打开文件：:sp &lt;filename&gt; 在本窗口右方打开文件：:vs &lt;filename&gt; 指定不同的区域，需要将下列内容添加到.vimrc 12set splitbelowset splitright 在不同窗口切换光标，替换默认快捷键，添加.vimrc 12345&quot;split navigationsnnoremap &lt;C-J&gt; &lt;C-W&gt;&lt;C-J&gt;nnoremap &lt;C-K&gt; &lt;C-W&gt;&lt;C-K&gt;nnoremap &lt;C-L&gt; &lt;C-W&gt;&lt;C-L&gt;nnoremap &lt;C-H&gt; &lt;C-W&gt;&lt;C-H&gt; Buffers缓冲区可以帮助我们快速打开历史文件 :ls 列出历史文件记录 打开历史文件:b &lt;buffer name or number&gt; 折叠类添加.vimrc以下内容 123&quot; Enable foldingset foldmethod=indentset foldlevel=99 修改折叠快捷键，添加.vimrc以下内容 12&quot; Enable folding with the spacebarnnoremap &lt;space&gt; za 折叠显示注释 添加.vimrc以下内容 1let g:SimpylFold_docstring_preview=1 解决缩进问题安装插件，首先添加.vimrc 1Plugin &apos;tmhedberg/SimpylFold&apos; 然后运行安装命令：:PluginInstall PEP8标准.vimrc添加一下内容 12345678au BufNewFile,BufRead *.py \ set tabstop=4 \ set softtabstop=4 \ set shiftwidth=4 \ set textwidth=79 \ set expandtab \ set autoindent \ set fileformat=unix 其它文件类型 1234au BufNewFile,BufRead *.js, *.html, *.css \ set tabstop=2 \ set softtabstop=2 \ set shiftwidth=2 1Plugin &apos;nvie/vim-flake8&apos; 空格相关自动空格 1Plugin &apos;vim-scripts/indentpython.vim&apos; 显示多余空格 1au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/ UTF-8 支持1set encoding=utf-8 智能提示1Bundle &apos;Valloric/YouCompleteMe&apos; 这里可能需要安装依赖库 智能提示自定义修改 12let g:ycm_autoclose_preview_window_after_completion=1map &lt;leader&gt;g :YcmCompleter GoToDefinitionElseDeclaration&lt;CR&gt; ### 虚拟环境支持 123456789&quot;python with virtualenv supportpy &lt;&lt; EOFimport osimport sysif &apos;VIRTUAL_ENV&apos; in os.environ: project_base_dir = os.environ[&apos;VIRTUAL_ENV&apos;] activate_this = os.path.join(project_base_dir, &apos;bin/activate_this.py&apos;) execfile(activate_this, dict(__file__=activate_this))EOF 代码高亮1Plugin &apos;vim-syntastic/syntastic&apos; 格式化代码12let python_highlight_all=1syntax on 颜色引擎12Plugin &apos;jnurmine/Zenburn&apos;Plugin &apos;altercation/vim-colors-solarized&apos; 不知道干什么的12345678if has(&apos;gui_running&apos;) set background=dark colorscheme solarizedelse colorscheme zenburnendifcall togglebg#map(&quot;&lt;F5&gt;&quot;) 文件浏览1Plugin &apos;scrooloose/nerdtree&apos; 使用tab键 1Plugin &apos;jistr/vim-nerdtree-tabs&apos; 快速搜索1Plugin &apos;kien/ctrlp.vim&apos; git 支持1Plugin &apos;tpope/vim-fugitive&apos; 上方的显示条1Plugin &apos;Lokaltog/powerline&apos;, &#123;&apos;rtp&apos;: &apos;powerline/bindings/vim/&apos;&#125; 系统剪切板1set clipboard=unnamed 支持shell编辑.inputrc添加如下内容 1set editing-mode vi]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用OpenSSL生成pfx/cer/crt证书]]></title>
    <url>%2F2018%2F03%2F12%2F%E4%BD%BF%E7%94%A8OpenSSL%E7%94%9F%E6%88%90pfx-cer-crt%E8%AF%81%E4%B9%A6%2F</url>
    <content type="text"><![CDATA[说明近期由于我们的网站需要手机端，然后IOS端接口必须要使用https，所以就有了自己生成证书的需要，下面就是整个过程，上网找了好久，都不全，下面总结记录下。 一、准备工作1.首先要下载OpenSSL，解压到你喜欢的地方 2.管理员身份打开cmd，cd到OpenSSL的bin目录（如果你将bin添加到环境变量的话，那就直接输入OpenSSL）输入OpenSSL回车，你会看到类似下面的界面 此时就可以输入OpenSSL命令了 二、生成key输入genrsa -out openssl.key 1024生成openssl.key文件。 openssl.key为key的名字随意起，1024为密钥长度 三、生成cer证书接着输入req -new -x509 -key openssl.key -out openssl.cer -days 3650 -subj /CN=zhangwei.website openssl.key为之前生成的key的名字，openssl.cer为生成的证书名字，3650为证书过期天数，CN的参数zhangwei.website是的你主机名或者IP地址(这里一定要写对，不然以后访问的话，浏览器会提示有风险)。 这样就生成了证书文件openssl.cer 四、生成IIS需要的PFX私钥文件输入pkcs12 -export -out openssl.pfx -inkey openssl.key -in openssl.cer 会让你输入密码，使用私钥时候使用的（千万不能忘记）。这样就生成了私钥文件openssl.pfx。 五、生成了crt证书由于手机需要crt证书，所以需要的话还要生成crt输入req -new -x509 -key openssl.key -out openssl.crt -days 3650 六、将pfx证书导入IIS打开IIS管理器点击网站，右侧会有一堆图标，找到服务器证书，点进去会发现有一个默认的证书叫localhost，不管它，右键导入证书，然后选择openssl.pfx这个文件就可以了，选不到的话，就把文件类型改为* 点击导入… 选择openssl.pfx文件输入生成时输入的密码 七、将证书绑定到你的网站点击你的网站，在最右侧点击绑定，会弹出一个IP列表的窗口，点击添加，选择https，然后下面证书选择刚刚导入的证书 这样Https站点就建立完成了，安装了openssl.cer证书的客户端就可以安全访问了。手机端用的是crt]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>OpenSSL</tag>
      </tags>
  </entry>
</search>
